{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\super\\\\OneDrive\\\\Desktop\\\\React progams\\\\who got who\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial State\nconst initialState = {\n  currentGame: null,\n  currentPlayer: null,\n  isConnected: false,\n  isLoading: false,\n  error: null,\n  activeDisputes: [],\n  leaderboard: []\n};\n\n// Actions\n\n// Reducer\nfunction gameReducer(state, action) {\n  var _state$currentPlayer;\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_CONNECTION':\n      return {\n        ...state,\n        isConnected: action.payload\n      };\n    case 'SET_GAME':\n      return {\n        ...state,\n        currentGame: action.payload\n      };\n    case 'SET_PLAYER':\n      return {\n        ...state,\n        currentPlayer: action.payload\n      };\n    case 'UPDATE_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: state.currentGame.players.map(p => p.id === action.payload.id ? action.payload : p)\n        },\n        currentPlayer: ((_state$currentPlayer = state.currentPlayer) === null || _state$currentPlayer === void 0 ? void 0 : _state$currentPlayer.id) === action.payload.id ? action.payload : state.currentPlayer\n      };\n    case 'ADD_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: [...state.currentGame.players, action.payload]\n        }\n      };\n    case 'REMOVE_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: state.currentGame.players.filter(p => p.id !== action.payload)\n        }\n      };\n    case 'UPDATE_TASK':\n      if (!state.currentPlayer) return state;\n      return {\n        ...state,\n        currentPlayer: {\n          ...state.currentPlayer,\n          tasks: state.currentPlayer.tasks.map(t => t.id === action.payload.id ? action.payload : t)\n        }\n      };\n    case 'ADD_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: [...state.activeDisputes, action.payload]\n      };\n    case 'UPDATE_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: state.activeDisputes.map(d => d.id === action.payload.id ? action.payload : d)\n      };\n    case 'REMOVE_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: state.activeDisputes.filter(d => d.id !== action.payload)\n      };\n    case 'UPDATE_LEADERBOARD':\n      return {\n        ...state,\n        leaderboard: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Context\n\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n// Socket instance\nlet socket = null;\n\n// Provider Component\n\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  // Initialize socket connection\n  useEffect(() => {\n    // TODO: Replace mock with real Socket.IO connection once backend is ready\n    // For now we skip setting up a socket so TypeScript doesn't complain about\n    // methods like .on() on an uninitialised object.\n    dispatch({\n      type: 'SET_CONNECTION',\n      payload: false\n    });\n    return () => {\n      if (socket) {\n        var _socket$disconnect, _socket;\n        (_socket$disconnect = (_socket = socket).disconnect) === null || _socket$disconnect === void 0 ? void 0 : _socket$disconnect.call(_socket);\n        socket = null;\n      }\n    };\n  }, []);\n\n  // Check for existing game in localStorage on app load\n  useEffect(() => {\n    const savedGameData = localStorage.getItem('gameData');\n    const savedPlayerId = localStorage.getItem('currentPlayerId');\n    if (savedGameData && savedPlayerId) {\n      try {\n        const game = JSON.parse(savedGameData);\n        const player = game.players.find(p => p.id === savedPlayerId);\n        if (game && player) {\n          dispatch({\n            type: 'SET_GAME',\n            payload: game\n          });\n          dispatch({\n            type: 'SET_PLAYER',\n            payload: player\n          });\n        }\n      } catch (error) {\n        console.log('Failed to restore game from localStorage:', error);\n        // Clear corrupted data\n        localStorage.removeItem('gameData');\n        localStorage.removeItem('currentPlayerId');\n      }\n    }\n  }, []);\n\n  // Game Actions\n  const createGame = async (mode, playerName) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      const gameId = Math.random().toString(36).substr(2, 9).toUpperCase();\n      const playerId = Math.random().toString(36).substr(2, 9);\n\n      // Import task functions\n      const {\n        getRandomTasks\n      } = await import('../data/mockTasks');\n      const playerTasks = getRandomTasks('core-a', 7);\n\n      // Create mock player\n      const mockPlayer = {\n        id: playerId,\n        name: playerName,\n        gameId: gameId,\n        swapsLeft: mode === 'casual' ? 2 : 1,\n        score: 0,\n        lockedIn: false,\n        isHost: true,\n        token: 'mock-token',\n        tasks: playerTasks.map((task, index) => ({\n          id: `task-instance-${index}`,\n          gameId: gameId,\n          playerId: playerId,\n          text: task.text,\n          tips: task.tips,\n          status: 'pending'\n        })),\n        stats: {\n          gothcas: 0,\n          failed: 0,\n          disputesLost: 0,\n          uniqueTargets: [],\n          firstTimeTargets: 0\n        }\n      };\n      const mockGame = {\n        id: gameId,\n        status: 'draft',\n        mode,\n        packId: 'core-a',\n        createdBy: playerName,\n        createdAt: new Date(),\n        hostId: playerId,\n        players: [mockPlayer],\n        settings: {\n          swapsAllowed: mode === 'casual' ? 2 : 1,\n          disputeTimeoutSeconds: 120,\n          hostDefaultOnTie: true,\n          enableNegativeScoring: mode === 'competitive',\n          maxPlayers: 8,\n          targetScore: 4\n        },\n        currentPhase: 'draft'\n      };\n      dispatch({\n        type: 'SET_GAME',\n        payload: mockGame\n      });\n      dispatch({\n        type: 'SET_PLAYER',\n        payload: mockPlayer\n      });\n\n      // Store game info for rejoin\n      localStorage.setItem('currentGameId', mockGame.id);\n      localStorage.setItem('currentPlayerId', playerId);\n      localStorage.setItem('gameData', JSON.stringify(mockGame));\n      localStorage.setItem('playerToken', 'mock-token');\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to create game'\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const joinGame = async (gameId, playerName) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      // Try to load existing game from localStorage\n      const savedGameData = localStorage.getItem('gameData');\n      let game = null;\n      if (savedGameData) {\n        const parsedGame = JSON.parse(savedGameData);\n        if (parsedGame.id === gameId) {\n          game = parsedGame;\n        }\n      }\n      if (!game) {\n        throw new Error('Game not found');\n      }\n\n      // Check if player already exists\n      let existingPlayer = game.players.find(p => p.name === playerName);\n      if (!existingPlayer) {\n        // Create new player\n        const playerId = Math.random().toString(36).substr(2, 9);\n        const {\n          getRandomTasks\n        } = await import('../data/mockTasks');\n        const playerTasks = getRandomTasks('core-a', 7);\n        const newPlayer = {\n          id: playerId,\n          name: playerName,\n          gameId: gameId,\n          swapsLeft: game.settings.swapsAllowed,\n          score: 0,\n          lockedIn: false,\n          isHost: false,\n          token: 'mock-token',\n          tasks: playerTasks.map((task, index) => ({\n            id: `task-instance-${playerId}-${index}`,\n            gameId: gameId,\n            playerId: playerId,\n            text: task.text,\n            tips: task.tips,\n            status: 'pending'\n          })),\n          stats: {\n            gothcas: 0,\n            failed: 0,\n            disputesLost: 0,\n            uniqueTargets: [],\n            firstTimeTargets: 0\n          }\n        };\n        game.players.push(newPlayer);\n        existingPlayer = newPlayer;\n      }\n      dispatch({\n        type: 'SET_GAME',\n        payload: game\n      });\n      dispatch({\n        type: 'SET_PLAYER',\n        payload: existingPlayer\n      });\n\n      // Update localStorage\n      localStorage.setItem('currentGameId', gameId);\n      localStorage.setItem('currentPlayerId', existingPlayer.id);\n      localStorage.setItem('gameData', JSON.stringify(game));\n      localStorage.setItem('playerToken', 'mock-token');\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to join game. Make sure the game ID is correct.'\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const startGame = async () => {\n    if (!state.currentGame) return;\n    const updatedGame = {\n      ...state.currentGame,\n      status: 'live',\n      currentPhase: 'play'\n    };\n    dispatch({\n      type: 'SET_GAME',\n      payload: updatedGame\n    });\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\n  };\n  const endGame = async () => {\n    if (!state.currentGame) return;\n    const updatedGame = {\n      ...state.currentGame,\n      status: 'ended',\n      currentPhase: 'ended'\n    };\n    dispatch({\n      type: 'SET_GAME',\n      payload: updatedGame\n    });\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\n  };\n  const lockInPlayer = async () => {\n    if (!state.currentPlayer || !state.currentGame) return;\n    const updatedPlayer = {\n      ...state.currentPlayer,\n      lockedIn: true\n    };\n    const updatedGame = {\n      ...state.currentGame,\n      players: state.currentGame.players.map(p => p.id === updatedPlayer.id ? updatedPlayer : p)\n    };\n    dispatch({\n      type: 'SET_PLAYER',\n      payload: updatedPlayer\n    });\n    dispatch({\n      type: 'SET_GAME',\n      payload: updatedGame\n    });\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\n  };\n  const updatePlayerName = async name => {\n    if (!state.currentPlayer || !state.currentGame) return;\n    const updatedPlayer = {\n      ...state.currentPlayer,\n      name\n    };\n    const updatedGame = {\n      ...state.currentGame,\n      players: state.currentGame.players.map(p => p.id === updatedPlayer.id ? updatedPlayer : p)\n    };\n    dispatch({\n      type: 'SET_PLAYER',\n      payload: updatedPlayer\n    });\n    dispatch({\n      type: 'SET_GAME',\n      payload: updatedGame\n    });\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\n  };\n  const swapTask = async taskId => {\n    if (!state.currentPlayer || !state.currentGame || state.currentPlayer.swapsLeft <= 0) return;\n    try {\n      const {\n        getRandomTask\n      } = await import('../data/mockTasks');\n      const currentTaskIds = state.currentPlayer.tasks.map(t => t.text); // Use text as ID for exclusion\n      const newTask = getRandomTask('core-a', currentTaskIds);\n      if (!newTask) {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: 'No more tasks available for swapping'\n        });\n        return;\n      }\n      const updatedTasks = state.currentPlayer.tasks.map(task => task.id === taskId ? {\n        ...task,\n        text: newTask.text,\n        difficulty: newTask.difficulty\n      } : task);\n      const updatedPlayer = {\n        ...state.currentPlayer,\n        tasks: updatedTasks,\n        swapsLeft: state.currentPlayer.swapsLeft - 1\n      };\n      const updatedGame = {\n        ...state.currentGame,\n        players: state.currentGame.players.map(p => p.id === updatedPlayer.id ? updatedPlayer : p)\n      };\n      dispatch({\n        type: 'SET_PLAYER',\n        payload: updatedPlayer\n      });\n      dispatch({\n        type: 'SET_GAME',\n        payload: updatedGame\n      });\n      localStorage.setItem('gameData', JSON.stringify(updatedGame));\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to swap task'\n      });\n    }\n  };\n  const claimGotcha = async (taskId, targetId) => {\n    if (!state.currentPlayer || !state.currentGame) return;\n    try {\n      // Update task status and add target\n      const updatedTasks = state.currentPlayer.tasks.map(task => task.id === taskId ? {\n        ...task,\n        status: 'got',\n        targetId,\n        gotAt: new Date()\n      } : task);\n\n      // Update player score and stats\n      const targetPlayer = state.currentGame.players.find(p => p.id === targetId);\n      const isFirstTimeTarget = !state.currentPlayer.stats.uniqueTargets.includes(targetId);\n      const updatedPlayer = {\n        ...state.currentPlayer,\n        tasks: updatedTasks,\n        score: state.currentPlayer.score + 1 + (isFirstTimeTarget ? 0.5 : 0),\n        stats: {\n          ...state.currentPlayer.stats,\n          gothcas: state.currentPlayer.stats.gothcas + 1,\n          uniqueTargets: isFirstTimeTarget ? [...state.currentPlayer.stats.uniqueTargets, targetId] : state.currentPlayer.stats.uniqueTargets,\n          firstTimeTargets: isFirstTimeTarget ? state.currentPlayer.stats.firstTimeTargets + 1 : state.currentPlayer.stats.firstTimeTargets\n        }\n      };\n      const updatedGame = {\n        ...state.currentGame,\n        players: state.currentGame.players.map(p => p.id === updatedPlayer.id ? updatedPlayer : p)\n      };\n      dispatch({\n        type: 'SET_PLAYER',\n        payload: updatedPlayer\n      });\n      dispatch({\n        type: 'SET_GAME',\n        payload: updatedGame\n      });\n      localStorage.setItem('gameData', JSON.stringify(updatedGame));\n\n      // Check win condition\n      if (updatedPlayer.score >= state.currentGame.settings.targetScore) {\n        await endGame();\n      }\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to claim Gotcha'\n      });\n    }\n  };\n  const disputeGotcha = async (taskId, reason) => {\n    // For demo purposes, just mark as disputed\n    console.log('Dispute created for task:', taskId, 'Reason:', reason);\n  };\n  const voteOnDispute = async (disputeId, vote) => {\n    // For demo purposes, just log the vote\n    console.log('Vote cast on dispute:', disputeId, 'Vote:', vote);\n  };\n  const acceptGotcha = async taskId => {\n    // For demo purposes, just accept\n    console.log('Gotcha accepted for task:', taskId);\n  };\n\n  // Testing utilities for demo\n  const forceGameState = async status => {\n    if (!state.currentGame) return;\n    const updatedGame = {\n      ...state.currentGame,\n      status,\n      currentPhase: status === 'draft' ? 'draft' : status === 'live' ? 'play' : 'ended'\n    };\n    dispatch({\n      type: 'SET_GAME',\n      payload: updatedGame\n    });\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\n  };\n  const simulateScore = async points => {\n    if (!state.currentPlayer || !state.currentGame) return;\n    const updatedPlayer = {\n      ...state.currentPlayer,\n      score: Math.max(0, state.currentPlayer.score + points),\n      stats: {\n        ...state.currentPlayer.stats,\n        gothcas: Math.max(0, state.currentPlayer.stats.gothcas + (points > 0 ? points : 0))\n      }\n    };\n    const updatedGame = {\n      ...state.currentGame,\n      players: state.currentGame.players.map(p => p.id === updatedPlayer.id ? updatedPlayer : p)\n    };\n    dispatch({\n      type: 'SET_PLAYER',\n      payload: updatedPlayer\n    });\n    dispatch({\n      type: 'SET_GAME',\n      payload: updatedGame\n    });\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\n  };\n\n  // Update player tasks directly\n  const updatePlayerTasks = (playerId, updatedTasks) => {\n    dispatch({\n      type: 'UPDATE_GAME',\n      payload: {\n        ...state.currentGame,\n        players: state.currentGame.players.map(player => player.id === playerId ? {\n          ...player,\n          tasks: player.tasks.map(task => {\n            const updated = updatedTasks.find(ut => ut.id === task.id);\n            return updated || task;\n          })\n        } : player)\n      }\n    });\n\n    // Update localStorage\n    const gameData = {\n      ...state.currentGame,\n      players: state.currentGame.players.map(player => player.id === playerId ? {\n        ...player,\n        tasks: player.tasks.map(task => {\n          const updated = updatedTasks.find(ut => ut.id === task.id);\n          return updated || task;\n        })\n      } : player)\n    };\n    localStorage.setItem('gameData', JSON.stringify(gameData));\n  };\n  const createTaskInstances = (tasks, gameId, playerId) => {\n    return tasks.map(task => ({\n      id: `${task.id}-${playerId}`,\n      gameId,\n      playerId,\n      text: task.text,\n      tips: task.tips,\n      status: 'pending'\n    }));\n  };\n  const contextValue = {\n    state,\n    socket,\n    createGame,\n    joinGame,\n    startGame,\n    endGame,\n    lockInPlayer,\n    updatePlayerName,\n    swapTask,\n    claimGotcha,\n    disputeGotcha,\n    voteOnDispute,\n    acceptGotcha,\n    // Testing utilities\n    forceGameState,\n    simulateScore,\n    updatePlayerTasks\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 634,\n    columnNumber: 5\n  }, this);\n}\n\n// Hook\n_s(GameProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = GameProvider;\nexport function useGame() {\n  _s2();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n}\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","currentGame","currentPlayer","isConnected","isLoading","error","activeDisputes","leaderboard","gameReducer","state","action","_state$currentPlayer","type","payload","players","map","p","id","filter","tasks","t","d","GameContext","undefined","socket","GameProvider","children","_s","dispatch","_socket$disconnect","_socket","disconnect","call","savedGameData","localStorage","getItem","savedPlayerId","game","JSON","parse","player","find","console","log","removeItem","createGame","mode","playerName","gameId","Math","random","toString","substr","toUpperCase","playerId","getRandomTasks","playerTasks","mockPlayer","name","swapsLeft","score","lockedIn","isHost","token","task","index","text","tips","status","stats","gothcas","failed","disputesLost","uniqueTargets","firstTimeTargets","mockGame","packId","createdBy","createdAt","Date","hostId","settings","swapsAllowed","disputeTimeoutSeconds","hostDefaultOnTie","enableNegativeScoring","maxPlayers","targetScore","currentPhase","setItem","stringify","joinGame","parsedGame","Error","existingPlayer","newPlayer","push","startGame","updatedGame","endGame","lockInPlayer","updatedPlayer","updatePlayerName","swapTask","taskId","getRandomTask","currentTaskIds","newTask","updatedTasks","difficulty","claimGotcha","targetId","gotAt","targetPlayer","isFirstTimeTarget","includes","disputeGotcha","reason","voteOnDispute","disputeId","vote","acceptGotcha","forceGameState","simulateScore","points","max","updatePlayerTasks","updated","ut","gameData","createTaskInstances","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","$RefreshReg$"],"sources":["C:/Users/super/OneDrive/Desktop/React progams/who got who/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { \r\n  GameState, \r\n  Game, \r\n  Player, \r\n  TaskInstance, \r\n  Dispute,\r\n  SocketEvents,\r\n  Task\r\n} from '../types';\r\n\r\n// Initial State\r\nconst initialState: GameState = {\r\n  currentGame: null,\r\n  currentPlayer: null,\r\n  isConnected: false,\r\n  isLoading: false,\r\n  error: null,\r\n  activeDisputes: [],\r\n  leaderboard: []\r\n};\r\n\r\n// Actions\r\ntype GameAction = \r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_CONNECTION'; payload: boolean }\r\n  | { type: 'SET_GAME'; payload: Game | null }\r\n  | { type: 'SET_PLAYER'; payload: Player | null }\r\n  | { type: 'UPDATE_PLAYER'; payload: Player }\r\n  | { type: 'ADD_PLAYER'; payload: Player }\r\n  | { type: 'REMOVE_PLAYER'; payload: string }\r\n  | { type: 'UPDATE_TASK'; payload: TaskInstance }\r\n  | { type: 'ADD_DISPUTE'; payload: Dispute }\r\n  | { type: 'UPDATE_DISPUTE'; payload: Dispute }\r\n  | { type: 'REMOVE_DISPUTE'; payload: string }\r\n  | { type: 'UPDATE_LEADERBOARD'; payload: Player[] };\r\n\r\n// Reducer\r\nfunction gameReducer(state: GameState, action: GameAction): GameState {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    \r\n    case 'SET_CONNECTION':\r\n      return { ...state, isConnected: action.payload };\r\n    \r\n    case 'SET_GAME':\r\n      return { ...state, currentGame: action.payload };\r\n    \r\n    case 'SET_PLAYER':\r\n      return { ...state, currentPlayer: action.payload };\r\n    \r\n    case 'UPDATE_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: state.currentGame.players.map(p => \r\n            p.id === action.payload.id ? action.payload : p\r\n          )\r\n        },\r\n        currentPlayer: state.currentPlayer?.id === action.payload.id \r\n          ? action.payload \r\n          : state.currentPlayer\r\n      };\r\n    \r\n    case 'ADD_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: [...state.currentGame.players, action.payload]\r\n        }\r\n      };\r\n    \r\n    case 'REMOVE_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: state.currentGame.players.filter(p => p.id !== action.payload)\r\n        }\r\n      };\r\n    \r\n    case 'UPDATE_TASK':\r\n      if (!state.currentPlayer) return state;\r\n      return {\r\n        ...state,\r\n        currentPlayer: {\r\n          ...state.currentPlayer,\r\n          tasks: state.currentPlayer.tasks.map(t => \r\n            t.id === action.payload.id ? action.payload : t\r\n          )\r\n        }\r\n      };\r\n    \r\n    case 'ADD_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: [...state.activeDisputes, action.payload]\r\n      };\r\n    \r\n    case 'UPDATE_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: state.activeDisputes.map(d => \r\n          d.id === action.payload.id ? action.payload : d\r\n        )\r\n      };\r\n    \r\n    case 'REMOVE_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: state.activeDisputes.filter(d => d.id !== action.payload)\r\n      };\r\n    \r\n    case 'UPDATE_LEADERBOARD':\r\n      return {\r\n        ...state,\r\n        leaderboard: action.payload\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Context\r\ninterface GameContextType {\r\n  state: GameState;\r\n  socket: Socket | null;\r\n  // Game actions\r\n  createGame: (mode: 'casual' | 'competitive', playerName: string) => Promise<void>;\r\n  joinGame: (gameId: string, playerName: string) => Promise<void>;\r\n  startGame: () => Promise<void>;\r\n  endGame: () => Promise<void>;\r\n  \r\n  // Player actions\r\n  lockInPlayer: () => Promise<void>;\r\n  updatePlayerName: (name: string) => Promise<void>;\r\n  \r\n  // Task actions\r\n  swapTask: (taskId: string) => Promise<void>;\r\n  claimGotcha: (taskId: string, targetId: string) => Promise<void>;\r\n  \r\n  // Dispute actions\r\n  disputeGotcha: (taskId: string, reason?: string) => Promise<void>;\r\n  voteOnDispute: (disputeId: string, vote: boolean) => Promise<void>;\r\n  acceptGotcha: (taskId: string) => Promise<void>;\r\n\r\n  // Testing utilities (demo only)\r\n  forceGameState?: (status: 'draft' | 'live' | 'ended') => Promise<void>;\r\n  simulateScore?: (points: number) => Promise<void>;\r\n  updatePlayerTasks?: (playerId: string, updatedTasks: TaskInstance[]) => void;\r\n}\r\n\r\nconst GameContext = createContext<GameContextType | undefined>(undefined);\r\n\r\n// Socket instance\r\nlet socket: Socket | null = null;\r\n\r\n// Provider Component\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function GameProvider({ children }: GameProviderProps) {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    // TODO: Replace mock with real Socket.IO connection once backend is ready\r\n    // For now we skip setting up a socket so TypeScript doesn't complain about\r\n    // methods like .on() on an uninitialised object.\r\n    dispatch({ type: 'SET_CONNECTION', payload: false });\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect?.();\r\n        socket = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Check for existing game in localStorage on app load\r\n  useEffect(() => {\r\n    const savedGameData = localStorage.getItem('gameData');\r\n    const savedPlayerId = localStorage.getItem('currentPlayerId');\r\n    \r\n    if (savedGameData && savedPlayerId) {\r\n      try {\r\n        const game: Game = JSON.parse(savedGameData);\r\n        const player = game.players.find(p => p.id === savedPlayerId);\r\n        \r\n        if (game && player) {\r\n          dispatch({ type: 'SET_GAME', payload: game });\r\n          dispatch({ type: 'SET_PLAYER', payload: player });\r\n        }\r\n      } catch (error) {\r\n        console.log('Failed to restore game from localStorage:', error);\r\n        // Clear corrupted data\r\n        localStorage.removeItem('gameData');\r\n        localStorage.removeItem('currentPlayerId');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Game Actions\r\n  const createGame = async (mode: 'casual' | 'competitive', playerName: string) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      const gameId = Math.random().toString(36).substr(2, 9).toUpperCase();\r\n      const playerId = Math.random().toString(36).substr(2, 9);\r\n      \r\n      // Import task functions\r\n      const { getRandomTasks } = await import('../data/mockTasks');\r\n      const playerTasks = getRandomTasks('core-a', 7);\r\n      \r\n      // Create mock player\r\n      const mockPlayer: Player = {\r\n        id: playerId,\r\n        name: playerName,\r\n        gameId: gameId,\r\n        swapsLeft: mode === 'casual' ? 2 : 1,\r\n        score: 0,\r\n        lockedIn: false,\r\n        isHost: true,\r\n        token: 'mock-token',\r\n        tasks: playerTasks.map((task, index) => ({\r\n          id: `task-instance-${index}`,\r\n          gameId: gameId,\r\n          playerId: playerId,\r\n          text: task.text,\r\n          tips: task.tips,\r\n          status: 'pending' as const\r\n        })),\r\n        stats: {\r\n          gothcas: 0,\r\n          failed: 0,\r\n          disputesLost: 0,\r\n          uniqueTargets: [],\r\n          firstTimeTargets: 0\r\n        }\r\n      };\r\n\r\n      const mockGame: Game = {\r\n        id: gameId,\r\n        status: 'draft',\r\n        mode,\r\n        packId: 'core-a',\r\n        createdBy: playerName,\r\n        createdAt: new Date(),\r\n        hostId: playerId,\r\n        players: [mockPlayer],\r\n        settings: {\r\n          swapsAllowed: mode === 'casual' ? 2 : 1,\r\n          disputeTimeoutSeconds: 120,\r\n          hostDefaultOnTie: true,\r\n          enableNegativeScoring: mode === 'competitive',\r\n          maxPlayers: 8,\r\n          targetScore: 4\r\n        },\r\n        currentPhase: 'draft'\r\n      };\r\n      \r\n      dispatch({ type: 'SET_GAME', payload: mockGame });\r\n      dispatch({ type: 'SET_PLAYER', payload: mockPlayer });\r\n      \r\n      // Store game info for rejoin\r\n      localStorage.setItem('currentGameId', mockGame.id);\r\n      localStorage.setItem('currentPlayerId', playerId);\r\n      localStorage.setItem('gameData', JSON.stringify(mockGame));\r\n      localStorage.setItem('playerToken', 'mock-token');\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to create game' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const joinGame = async (gameId: string, playerName: string) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      // Try to load existing game from localStorage\r\n      const savedGameData = localStorage.getItem('gameData');\r\n      let game: Game | null = null;\r\n      \r\n      if (savedGameData) {\r\n        const parsedGame = JSON.parse(savedGameData);\r\n        if (parsedGame.id === gameId) {\r\n          game = parsedGame;\r\n        }\r\n      }\r\n      \r\n      if (!game) {\r\n        throw new Error('Game not found');\r\n      }\r\n      \r\n      // Check if player already exists\r\n      let existingPlayer = game.players.find(p => p.name === playerName);\r\n      \r\n      if (!existingPlayer) {\r\n        // Create new player\r\n        const playerId = Math.random().toString(36).substr(2, 9);\r\n        const { getRandomTasks } = await import('../data/mockTasks');\r\n        const playerTasks = getRandomTasks('core-a', 7);\r\n        \r\n        const newPlayer: Player = {\r\n          id: playerId,\r\n          name: playerName,\r\n          gameId: gameId,\r\n          swapsLeft: game.settings.swapsAllowed,\r\n          score: 0,\r\n          lockedIn: false,\r\n          isHost: false,\r\n          token: 'mock-token',\r\n          tasks: playerTasks.map((task, index) => ({\r\n            id: `task-instance-${playerId}-${index}`,\r\n            gameId: gameId,\r\n            playerId: playerId,\r\n            text: task.text,\r\n            tips: task.tips,\r\n            status: 'pending' as const\r\n          })),\r\n          stats: {\r\n            gothcas: 0,\r\n            failed: 0,\r\n            disputesLost: 0,\r\n            uniqueTargets: [],\r\n            firstTimeTargets: 0\r\n          }\r\n        };\r\n        \r\n        game.players.push(newPlayer);\r\n        existingPlayer = newPlayer;\r\n      }\r\n      \r\n      dispatch({ type: 'SET_GAME', payload: game });\r\n      dispatch({ type: 'SET_PLAYER', payload: existingPlayer });\r\n      \r\n      // Update localStorage\r\n      localStorage.setItem('currentGameId', gameId);\r\n      localStorage.setItem('currentPlayerId', existingPlayer.id);\r\n      localStorage.setItem('gameData', JSON.stringify(game));\r\n      localStorage.setItem('playerToken', 'mock-token');\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to join game. Make sure the game ID is correct.' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const startGame = async () => {\r\n    if (!state.currentGame) return;\r\n    \r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      status: 'live' as const,\r\n      currentPhase: 'play' as const\r\n    };\r\n    \r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const endGame = async () => {\r\n    if (!state.currentGame) return;\r\n    \r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      status: 'ended' as const,\r\n      currentPhase: 'ended' as const\r\n    };\r\n    \r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const lockInPlayer = async () => {\r\n    if (!state.currentPlayer || !state.currentGame) return;\r\n    \r\n    const updatedPlayer = { ...state.currentPlayer, lockedIn: true };\r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      players: state.currentGame.players.map(p => \r\n        p.id === updatedPlayer.id ? updatedPlayer : p\r\n      )\r\n    };\r\n    \r\n    dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const updatePlayerName = async (name: string) => {\r\n    if (!state.currentPlayer || !state.currentGame) return;\r\n    \r\n    const updatedPlayer = { ...state.currentPlayer, name };\r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      players: state.currentGame.players.map(p => \r\n        p.id === updatedPlayer.id ? updatedPlayer : p\r\n      )\r\n    };\r\n    \r\n    dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const swapTask = async (taskId: string) => {\r\n    if (!state.currentPlayer || !state.currentGame || state.currentPlayer.swapsLeft <= 0) return;\r\n    \r\n    try {\r\n      const { getRandomTask } = await import('../data/mockTasks');\r\n      const currentTaskIds = state.currentPlayer.tasks.map(t => t.text); // Use text as ID for exclusion\r\n      const newTask = getRandomTask('core-a', currentTaskIds);\r\n      \r\n      if (!newTask) {\r\n        dispatch({ type: 'SET_ERROR', payload: 'No more tasks available for swapping' });\r\n        return;\r\n      }\r\n      \r\n      const updatedTasks = state.currentPlayer.tasks.map(task => \r\n        task.id === taskId \r\n          ? { ...task, text: newTask.text, difficulty: newTask.difficulty }\r\n          : task\r\n      );\r\n      \r\n      const updatedPlayer = {\r\n        ...state.currentPlayer,\r\n        tasks: updatedTasks,\r\n        swapsLeft: state.currentPlayer.swapsLeft - 1\r\n      };\r\n      \r\n      const updatedGame = {\r\n        ...state.currentGame,\r\n        players: state.currentGame.players.map(p => \r\n          p.id === updatedPlayer.id ? updatedPlayer : p\r\n        )\r\n      };\r\n      \r\n      dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n      dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n      localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to swap task' });\r\n    }\r\n  };\r\n\r\n  const claimGotcha = async (taskId: string, targetId: string) => {\r\n    if (!state.currentPlayer || !state.currentGame) return;\r\n    \r\n    try {\r\n      // Update task status and add target\r\n      const updatedTasks = state.currentPlayer.tasks.map(task => \r\n        task.id === taskId \r\n          ? { ...task, status: 'got' as const, targetId, gotAt: new Date() }\r\n          : task\r\n      );\r\n      \r\n      // Update player score and stats\r\n      const targetPlayer = state.currentGame.players.find(p => p.id === targetId);\r\n      const isFirstTimeTarget = !state.currentPlayer.stats.uniqueTargets.includes(targetId);\r\n      \r\n      const updatedPlayer = {\r\n        ...state.currentPlayer,\r\n        tasks: updatedTasks,\r\n        score: state.currentPlayer.score + 1 + (isFirstTimeTarget ? 0.5 : 0),\r\n        stats: {\r\n          ...state.currentPlayer.stats,\r\n          gothcas: state.currentPlayer.stats.gothcas + 1,\r\n          uniqueTargets: isFirstTimeTarget \r\n            ? [...state.currentPlayer.stats.uniqueTargets, targetId]\r\n            : state.currentPlayer.stats.uniqueTargets,\r\n          firstTimeTargets: isFirstTimeTarget \r\n            ? state.currentPlayer.stats.firstTimeTargets + 1\r\n            : state.currentPlayer.stats.firstTimeTargets\r\n        }\r\n      };\r\n      \r\n      const updatedGame = {\r\n        ...state.currentGame,\r\n        players: state.currentGame.players.map(p => \r\n          p.id === updatedPlayer.id ? updatedPlayer : p\r\n        )\r\n      };\r\n      \r\n      dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n      dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n      localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n      \r\n      // Check win condition\r\n      if (updatedPlayer.score >= state.currentGame.settings.targetScore) {\r\n        await endGame();\r\n      }\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to claim Gotcha' });\r\n    }\r\n  };\r\n\r\n  const disputeGotcha = async (taskId: string, reason?: string) => {\r\n    // For demo purposes, just mark as disputed\r\n    console.log('Dispute created for task:', taskId, 'Reason:', reason);\r\n  };\r\n\r\n  const voteOnDispute = async (disputeId: string, vote: boolean) => {\r\n    // For demo purposes, just log the vote\r\n    console.log('Vote cast on dispute:', disputeId, 'Vote:', vote);\r\n  };\r\n\r\n  const acceptGotcha = async (taskId: string) => {\r\n    // For demo purposes, just accept\r\n    console.log('Gotcha accepted for task:', taskId);\r\n  };\r\n\r\n  // Testing utilities for demo\r\n  const forceGameState = async (status: 'draft' | 'live' | 'ended') => {\r\n    if (!state.currentGame) return;\r\n    \r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      status,\r\n      currentPhase: (status === 'draft' ? 'draft' : status === 'live' ? 'play' : 'ended') as 'draft' | 'play' | 'ended'\r\n    };\r\n    \r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const simulateScore = async (points: number) => {\r\n    if (!state.currentPlayer || !state.currentGame) return;\r\n    \r\n    const updatedPlayer = {\r\n      ...state.currentPlayer,\r\n      score: Math.max(0, state.currentPlayer.score + points),\r\n      stats: {\r\n        ...state.currentPlayer.stats,\r\n        gothcas: Math.max(0, state.currentPlayer.stats.gothcas + (points > 0 ? points : 0))\r\n      }\r\n    };\r\n    \r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      players: state.currentGame.players.map(p => \r\n        p.id === updatedPlayer.id ? updatedPlayer : p\r\n      )\r\n    };\r\n    \r\n    dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  // Update player tasks directly\r\n  const updatePlayerTasks = (playerId: string, updatedTasks: TaskInstance[]) => {\r\n    dispatch({\r\n      type: 'UPDATE_GAME',\r\n      payload: {\r\n        ...state.currentGame!,\r\n        players: state.currentGame!.players.map(player => \r\n          player.id === playerId \r\n            ? { ...player, tasks: player.tasks.map(task => {\r\n                const updated = updatedTasks.find(ut => ut.id === task.id);\r\n                return updated || task;\r\n              })}\r\n            : player\r\n        )\r\n      }\r\n    });\r\n\r\n    // Update localStorage\r\n    const gameData = {\r\n      ...state.currentGame!,\r\n      players: state.currentGame!.players.map(player => \r\n        player.id === playerId \r\n          ? { ...player, tasks: player.tasks.map(task => {\r\n              const updated = updatedTasks.find(ut => ut.id === task.id);\r\n              return updated || task;\r\n            })}\r\n          : player\r\n      )\r\n    };\r\n    localStorage.setItem('gameData', JSON.stringify(gameData));\r\n  };\r\n\r\n  const createTaskInstances = (tasks: Task[], gameId: string, playerId: string): TaskInstance[] => {\r\n    return tasks.map(task => ({\r\n      id: `${task.id}-${playerId}`,\r\n      gameId,\r\n      playerId,\r\n      text: task.text,\r\n      tips: task.tips,\r\n      status: 'pending' as const\r\n    }));\r\n  };\r\n\r\n  const contextValue: GameContextType = {\r\n    state,\r\n    socket,\r\n    createGame,\r\n    joinGame,\r\n    startGame,\r\n    endGame,\r\n    lockInPlayer,\r\n    updatePlayerName,\r\n    swapTask,\r\n    claimGotcha,\r\n    disputeGotcha,\r\n    voteOnDispute,\r\n    acceptGotcha,\r\n    // Testing utilities\r\n    forceGameState,\r\n    simulateScore,\r\n    updatePlayerTasks\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={contextValue}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook\r\nexport function useGame() {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}