{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\super\\\\OneDrive\\\\Desktop\\\\React progams\\\\who got who\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial State\nconst initialState = {\n  currentGame: null,\n  currentPlayer: null,\n  isConnected: false,\n  isLoading: false,\n  error: null,\n  activeDisputes: [],\n  leaderboard: []\n};\n\n// Actions\n\n// Reducer\nfunction gameReducer(state, action) {\n  var _state$currentPlayer;\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_CONNECTION':\n      return {\n        ...state,\n        isConnected: action.payload\n      };\n    case 'SET_GAME':\n      return {\n        ...state,\n        currentGame: action.payload\n      };\n    case 'SET_PLAYER':\n      return {\n        ...state,\n        currentPlayer: action.payload\n      };\n    case 'UPDATE_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: state.currentGame.players.map(p => p.id === action.payload.id ? action.payload : p)\n        },\n        currentPlayer: ((_state$currentPlayer = state.currentPlayer) === null || _state$currentPlayer === void 0 ? void 0 : _state$currentPlayer.id) === action.payload.id ? action.payload : state.currentPlayer\n      };\n    case 'ADD_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: [...state.currentGame.players, action.payload]\n        }\n      };\n    case 'REMOVE_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: state.currentGame.players.filter(p => p.id !== action.payload)\n        }\n      };\n    case 'UPDATE_TASK':\n      if (!state.currentPlayer) return state;\n      return {\n        ...state,\n        currentPlayer: {\n          ...state.currentPlayer,\n          tasks: state.currentPlayer.tasks.map(t => t.id === action.payload.id ? action.payload : t)\n        }\n      };\n    case 'ADD_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: [...state.activeDisputes, action.payload]\n      };\n    case 'UPDATE_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: state.activeDisputes.map(d => d.id === action.payload.id ? action.payload : d)\n      };\n    case 'REMOVE_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: state.activeDisputes.filter(d => d.id !== action.payload)\n      };\n    case 'UPDATE_LEADERBOARD':\n      return {\n        ...state,\n        leaderboard: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Context\n\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n// Socket instance\nlet socket = null;\n\n// Provider Component\n\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  // Initialize socket connection\n  useEffect(() => {\n    // TODO: Replace mock with real Socket.IO connection once backend is ready\n    // For now we skip setting up a socket so TypeScript doesnâ€™t complain about\n    // methods like .on() on an uninitialised object.\n    dispatch({\n      type: 'SET_CONNECTION',\n      payload: false\n    });\n    return () => {\n      if (socket) {\n        var _socket$disconnect, _socket;\n        (_socket$disconnect = (_socket = socket).disconnect) === null || _socket$disconnect === void 0 ? void 0 : _socket$disconnect.call(_socket);\n        socket = null;\n      }\n    };\n  }, []);\n\n  // Game Actions\n  const createGame = async (mode, playerName) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      const gameId = Math.random().toString(36).substr(2, 9).toUpperCase();\n      const playerId = Math.random().toString(36).substr(2, 9);\n\n      // Import task functions\n      const {\n        getRandomTasks\n      } = await import('../data/mockTasks');\n      const playerTasks = getRandomTasks('core-a', 7);\n\n      // Create mock player\n      const mockPlayer = {\n        id: playerId,\n        name: playerName,\n        gameId: gameId,\n        swapsLeft: mode === 'casual' ? 2 : 1,\n        score: 0,\n        lockedIn: false,\n        isHost: true,\n        token: 'mock-token',\n        tasks: playerTasks.map((task, index) => ({\n          id: `task-instance-${index}`,\n          gameId: gameId,\n          playerId: playerId,\n          text: task.text,\n          difficulty: task.difficulty,\n          status: 'pending',\n          packId: 'core-a',\n          originalIndex: index\n        })),\n        stats: {\n          gothcas: 0,\n          failed: 0,\n          disputesLost: 0,\n          uniqueTargets: [],\n          firstTimeTargets: 0\n        }\n      };\n      const mockGame = {\n        id: gameId,\n        status: 'draft',\n        mode,\n        packId: 'core-a',\n        createdBy: playerName,\n        createdAt: new Date(),\n        hostId: playerId,\n        players: [mockPlayer],\n        settings: {\n          swapsAllowed: mode === 'casual' ? 2 : 1,\n          disputeTimeoutSeconds: 120,\n          hostDefaultOnTie: true,\n          enableNegativeScoring: mode === 'competitive',\n          maxPlayers: 8,\n          targetScore: 4\n        },\n        currentPhase: 'draft'\n      };\n      dispatch({\n        type: 'SET_GAME',\n        payload: mockGame\n      });\n      dispatch({\n        type: 'SET_PLAYER',\n        payload: mockPlayer\n      });\n\n      // Store game info for rejoin\n      localStorage.setItem('currentGameId', mockGame.id);\n      localStorage.setItem('currentPlayerId', playerId);\n      localStorage.setItem('gameData', JSON.stringify(mockGame));\n      localStorage.setItem('playerToken', 'mock-token');\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to create game'\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const joinGame = async (gameId, playerName) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      // Try to load existing game from localStorage\n      const savedGameData = localStorage.getItem('gameData');\n      let game = null;\n      if (savedGameData) {\n        const parsedGame = JSON.parse(savedGameData);\n        if (parsedGame.id === gameId) {\n          game = parsedGame;\n        }\n      }\n      if (!game) {\n        throw new Error('Game not found');\n      }\n\n      // Check if player already exists\n      let existingPlayer = game.players.find(p => p.name === playerName);\n      if (!existingPlayer) {\n        // Create new player\n        const playerId = Math.random().toString(36).substr(2, 9);\n        const {\n          getRandomTasks\n        } = await import('../data/mockTasks');\n        const playerTasks = getRandomTasks('core-a', 7);\n        const newPlayer = {\n          id: playerId,\n          name: playerName,\n          gameId: gameId,\n          swapsLeft: game.settings.swapsAllowed,\n          score: 0,\n          lockedIn: false,\n          isHost: false,\n          token: 'mock-token',\n          tasks: playerTasks.map((task, index) => ({\n            id: `task-instance-${playerId}-${index}`,\n            gameId: gameId,\n            playerId: playerId,\n            text: task.text,\n            difficulty: task.difficulty,\n            status: 'pending',\n            packId: 'core-a',\n            originalIndex: index\n          })),\n          stats: {\n            gothcas: 0,\n            failed: 0,\n            disputesLost: 0,\n            uniqueTargets: [],\n            firstTimeTargets: 0\n          }\n        };\n        game.players.push(newPlayer);\n        existingPlayer = newPlayer;\n      }\n      dispatch({\n        type: 'SET_GAME',\n        payload: game\n      });\n      dispatch({\n        type: 'SET_PLAYER',\n        payload: existingPlayer\n      });\n\n      // Update localStorage\n      localStorage.setItem('currentGameId', gameId);\n      localStorage.setItem('currentPlayerId', existingPlayer.id);\n      localStorage.setItem('gameData', JSON.stringify(game));\n      localStorage.setItem('playerToken', 'mock-token');\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to join game. Make sure the game ID is correct.'\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const startGame = async () => {\n    if (socket && state.currentGame) {\n      socket.emit('game:start', {\n        gameId: state.currentGame.id\n      });\n    }\n  };\n  const endGame = async () => {\n    if (socket && state.currentGame) {\n      socket.emit('game:end', {\n        gameId: state.currentGame.id\n      });\n    }\n  };\n  const lockInPlayer = async () => {\n    if (socket && state.currentPlayer) {\n      socket.emit('player:lock', {\n        playerId: state.currentPlayer.id\n      });\n    }\n  };\n  const updatePlayerName = async name => {\n    if (socket && state.currentPlayer) {\n      socket.emit('player:update', {\n        playerId: state.currentPlayer.id,\n        updates: {\n          name\n        }\n      });\n    }\n  };\n  const swapTask = async taskId => {\n    if (socket && state.currentPlayer) {\n      socket.emit('task:swap', {\n        playerId: state.currentPlayer.id,\n        taskId\n      });\n    }\n  };\n  const claimGotcha = async (taskId, targetId) => {\n    if (socket) {\n      socket.emit('task:gotcha', {\n        taskId,\n        targetId\n      });\n    }\n  };\n  const disputeGotcha = async (taskId, reason) => {\n    if (socket) {\n      socket.emit('dispute:create', {\n        taskId,\n        reason\n      });\n    }\n  };\n  const voteOnDispute = async (disputeId, vote) => {\n    if (socket && state.currentPlayer) {\n      socket.emit('dispute:vote', {\n        disputeId,\n        vote,\n        voterId: state.currentPlayer.id\n      });\n    }\n  };\n  const acceptGotcha = async taskId => {\n    if (socket) {\n      socket.emit('task:accept', {\n        taskId\n      });\n    }\n  };\n  const contextValue = {\n    state,\n    socket,\n    createGame,\n    joinGame,\n    startGame,\n    endGame,\n    lockInPlayer,\n    updatePlayerName,\n    swapTask,\n    claimGotcha,\n    disputeGotcha,\n    voteOnDispute,\n    acceptGotcha\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 5\n  }, this);\n}\n\n// Hook\n_s(GameProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = GameProvider;\nexport function useGame() {\n  _s2();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n}\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","currentGame","currentPlayer","isConnected","isLoading","error","activeDisputes","leaderboard","gameReducer","state","action","_state$currentPlayer","type","payload","players","map","p","id","filter","tasks","t","d","GameContext","undefined","socket","GameProvider","children","_s","dispatch","_socket$disconnect","_socket","disconnect","call","createGame","mode","playerName","gameId","Math","random","toString","substr","toUpperCase","playerId","getRandomTasks","playerTasks","mockPlayer","name","swapsLeft","score","lockedIn","isHost","token","task","index","text","difficulty","status","packId","originalIndex","stats","gothcas","failed","disputesLost","uniqueTargets","firstTimeTargets","mockGame","createdBy","createdAt","Date","hostId","settings","swapsAllowed","disputeTimeoutSeconds","hostDefaultOnTie","enableNegativeScoring","maxPlayers","targetScore","currentPhase","localStorage","setItem","JSON","stringify","joinGame","savedGameData","getItem","game","parsedGame","parse","Error","existingPlayer","find","newPlayer","push","startGame","emit","endGame","lockInPlayer","updatePlayerName","updates","swapTask","taskId","claimGotcha","targetId","disputeGotcha","reason","voteOnDispute","disputeId","vote","voterId","acceptGotcha","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","$RefreshReg$"],"sources":["C:/Users/super/OneDrive/Desktop/React progams/who got who/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { \r\n  GameState, \r\n  Game, \r\n  Player, \r\n  TaskInstance, \r\n  Dispute,\r\n  SocketEvents \r\n} from '../types';\r\n\r\n// Initial State\r\nconst initialState: GameState = {\r\n  currentGame: null,\r\n  currentPlayer: null,\r\n  isConnected: false,\r\n  isLoading: false,\r\n  error: null,\r\n  activeDisputes: [],\r\n  leaderboard: []\r\n};\r\n\r\n// Actions\r\ntype GameAction = \r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_CONNECTION'; payload: boolean }\r\n  | { type: 'SET_GAME'; payload: Game | null }\r\n  | { type: 'SET_PLAYER'; payload: Player | null }\r\n  | { type: 'UPDATE_PLAYER'; payload: Player }\r\n  | { type: 'ADD_PLAYER'; payload: Player }\r\n  | { type: 'REMOVE_PLAYER'; payload: string }\r\n  | { type: 'UPDATE_TASK'; payload: TaskInstance }\r\n  | { type: 'ADD_DISPUTE'; payload: Dispute }\r\n  | { type: 'UPDATE_DISPUTE'; payload: Dispute }\r\n  | { type: 'REMOVE_DISPUTE'; payload: string }\r\n  | { type: 'UPDATE_LEADERBOARD'; payload: Player[] };\r\n\r\n// Reducer\r\nfunction gameReducer(state: GameState, action: GameAction): GameState {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    \r\n    case 'SET_CONNECTION':\r\n      return { ...state, isConnected: action.payload };\r\n    \r\n    case 'SET_GAME':\r\n      return { ...state, currentGame: action.payload };\r\n    \r\n    case 'SET_PLAYER':\r\n      return { ...state, currentPlayer: action.payload };\r\n    \r\n    case 'UPDATE_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: state.currentGame.players.map(p => \r\n            p.id === action.payload.id ? action.payload : p\r\n          )\r\n        },\r\n        currentPlayer: state.currentPlayer?.id === action.payload.id \r\n          ? action.payload \r\n          : state.currentPlayer\r\n      };\r\n    \r\n    case 'ADD_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: [...state.currentGame.players, action.payload]\r\n        }\r\n      };\r\n    \r\n    case 'REMOVE_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: state.currentGame.players.filter(p => p.id !== action.payload)\r\n        }\r\n      };\r\n    \r\n    case 'UPDATE_TASK':\r\n      if (!state.currentPlayer) return state;\r\n      return {\r\n        ...state,\r\n        currentPlayer: {\r\n          ...state.currentPlayer,\r\n          tasks: state.currentPlayer.tasks.map(t => \r\n            t.id === action.payload.id ? action.payload : t\r\n          )\r\n        }\r\n      };\r\n    \r\n    case 'ADD_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: [...state.activeDisputes, action.payload]\r\n      };\r\n    \r\n    case 'UPDATE_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: state.activeDisputes.map(d => \r\n          d.id === action.payload.id ? action.payload : d\r\n        )\r\n      };\r\n    \r\n    case 'REMOVE_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: state.activeDisputes.filter(d => d.id !== action.payload)\r\n      };\r\n    \r\n    case 'UPDATE_LEADERBOARD':\r\n      return {\r\n        ...state,\r\n        leaderboard: action.payload\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Context\r\ninterface GameContextType {\r\n  state: GameState;\r\n  socket: Socket | null;\r\n  // Game actions\r\n  createGame: (mode: 'casual' | 'competitive', playerName: string) => Promise<void>;\r\n  joinGame: (gameId: string, playerName: string) => Promise<void>;\r\n  startGame: () => Promise<void>;\r\n  endGame: () => Promise<void>;\r\n  \r\n  // Player actions\r\n  lockInPlayer: () => Promise<void>;\r\n  updatePlayerName: (name: string) => Promise<void>;\r\n  \r\n  // Task actions\r\n  swapTask: (taskId: string) => Promise<void>;\r\n  claimGotcha: (taskId: string, targetId: string) => Promise<void>;\r\n  \r\n  // Dispute actions\r\n  disputeGotcha: (taskId: string, reason?: string) => Promise<void>;\r\n  voteOnDispute: (disputeId: string, vote: boolean) => Promise<void>;\r\n  acceptGotcha: (taskId: string) => Promise<void>;\r\n}\r\n\r\nconst GameContext = createContext<GameContextType | undefined>(undefined);\r\n\r\n// Socket instance\r\nlet socket: Socket | null = null;\r\n\r\n// Provider Component\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function GameProvider({ children }: GameProviderProps) {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    // TODO: Replace mock with real Socket.IO connection once backend is ready\r\n    // For now we skip setting up a socket so TypeScript doesnâ€™t complain about\r\n    // methods like .on() on an uninitialised object.\r\n    dispatch({ type: 'SET_CONNECTION', payload: false });\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect?.();\r\n        socket = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Game Actions\r\n  const createGame = async (mode: 'casual' | 'competitive', playerName: string) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      const gameId = Math.random().toString(36).substr(2, 9).toUpperCase();\r\n      const playerId = Math.random().toString(36).substr(2, 9);\r\n      \r\n      // Import task functions\r\n      const { getRandomTasks } = await import('../data/mockTasks');\r\n      const playerTasks = getRandomTasks('core-a', 7);\r\n      \r\n      // Create mock player\r\n      const mockPlayer: Player = {\r\n        id: playerId,\r\n        name: playerName,\r\n        gameId: gameId,\r\n        swapsLeft: mode === 'casual' ? 2 : 1,\r\n        score: 0,\r\n        lockedIn: false,\r\n        isHost: true,\r\n        token: 'mock-token',\r\n        tasks: playerTasks.map((task, index) => ({\r\n          id: `task-instance-${index}`,\r\n          gameId: gameId,\r\n          playerId: playerId,\r\n          text: task.text,\r\n          difficulty: task.difficulty,\r\n          status: 'pending' as const,\r\n          packId: 'core-a',\r\n          originalIndex: index\r\n        })),\r\n        stats: {\r\n          gothcas: 0,\r\n          failed: 0,\r\n          disputesLost: 0,\r\n          uniqueTargets: [],\r\n          firstTimeTargets: 0\r\n        }\r\n      };\r\n\r\n      const mockGame: Game = {\r\n        id: gameId,\r\n        status: 'draft',\r\n        mode,\r\n        packId: 'core-a',\r\n        createdBy: playerName,\r\n        createdAt: new Date(),\r\n        hostId: playerId,\r\n        players: [mockPlayer],\r\n        settings: {\r\n          swapsAllowed: mode === 'casual' ? 2 : 1,\r\n          disputeTimeoutSeconds: 120,\r\n          hostDefaultOnTie: true,\r\n          enableNegativeScoring: mode === 'competitive',\r\n          maxPlayers: 8,\r\n          targetScore: 4\r\n        },\r\n        currentPhase: 'draft'\r\n      };\r\n      \r\n      dispatch({ type: 'SET_GAME', payload: mockGame });\r\n      dispatch({ type: 'SET_PLAYER', payload: mockPlayer });\r\n      \r\n      // Store game info for rejoin\r\n      localStorage.setItem('currentGameId', mockGame.id);\r\n      localStorage.setItem('currentPlayerId', playerId);\r\n      localStorage.setItem('gameData', JSON.stringify(mockGame));\r\n      localStorage.setItem('playerToken', 'mock-token');\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to create game' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const joinGame = async (gameId: string, playerName: string) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      // Try to load existing game from localStorage\r\n      const savedGameData = localStorage.getItem('gameData');\r\n      let game: Game | null = null;\r\n      \r\n      if (savedGameData) {\r\n        const parsedGame = JSON.parse(savedGameData);\r\n        if (parsedGame.id === gameId) {\r\n          game = parsedGame;\r\n        }\r\n      }\r\n      \r\n      if (!game) {\r\n        throw new Error('Game not found');\r\n      }\r\n      \r\n      // Check if player already exists\r\n      let existingPlayer = game.players.find(p => p.name === playerName);\r\n      \r\n      if (!existingPlayer) {\r\n        // Create new player\r\n        const playerId = Math.random().toString(36).substr(2, 9);\r\n        const { getRandomTasks } = await import('../data/mockTasks');\r\n        const playerTasks = getRandomTasks('core-a', 7);\r\n        \r\n        const newPlayer: Player = {\r\n          id: playerId,\r\n          name: playerName,\r\n          gameId: gameId,\r\n          swapsLeft: game.settings.swapsAllowed,\r\n          score: 0,\r\n          lockedIn: false,\r\n          isHost: false,\r\n          token: 'mock-token',\r\n          tasks: playerTasks.map((task, index) => ({\r\n            id: `task-instance-${playerId}-${index}`,\r\n            gameId: gameId,\r\n            playerId: playerId,\r\n            text: task.text,\r\n            difficulty: task.difficulty,\r\n            status: 'pending' as const,\r\n            packId: 'core-a',\r\n            originalIndex: index\r\n          })),\r\n          stats: {\r\n            gothcas: 0,\r\n            failed: 0,\r\n            disputesLost: 0,\r\n            uniqueTargets: [],\r\n            firstTimeTargets: 0\r\n          }\r\n        };\r\n        \r\n        game.players.push(newPlayer);\r\n        existingPlayer = newPlayer;\r\n      }\r\n      \r\n      dispatch({ type: 'SET_GAME', payload: game });\r\n      dispatch({ type: 'SET_PLAYER', payload: existingPlayer });\r\n      \r\n      // Update localStorage\r\n      localStorage.setItem('currentGameId', gameId);\r\n      localStorage.setItem('currentPlayerId', existingPlayer.id);\r\n      localStorage.setItem('gameData', JSON.stringify(game));\r\n      localStorage.setItem('playerToken', 'mock-token');\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to join game. Make sure the game ID is correct.' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const startGame = async () => {\r\n    if (socket && state.currentGame) {\r\n      socket.emit('game:start', { gameId: state.currentGame.id });\r\n    }\r\n  };\r\n\r\n  const endGame = async () => {\r\n    if (socket && state.currentGame) {\r\n      socket.emit('game:end', { gameId: state.currentGame.id });\r\n    }\r\n  };\r\n\r\n  const lockInPlayer = async () => {\r\n    if (socket && state.currentPlayer) {\r\n      socket.emit('player:lock', { playerId: state.currentPlayer.id });\r\n    }\r\n  };\r\n\r\n  const updatePlayerName = async (name: string) => {\r\n    if (socket && state.currentPlayer) {\r\n      socket.emit('player:update', { \r\n        playerId: state.currentPlayer.id, \r\n        updates: { name } \r\n      });\r\n    }\r\n  };\r\n\r\n  const swapTask = async (taskId: string) => {\r\n    if (socket && state.currentPlayer) {\r\n      socket.emit('task:swap', { \r\n        playerId: state.currentPlayer.id, \r\n        taskId \r\n      });\r\n    }\r\n  };\r\n\r\n  const claimGotcha = async (taskId: string, targetId: string) => {\r\n    if (socket) {\r\n      socket.emit('task:gotcha', { taskId, targetId });\r\n    }\r\n  };\r\n\r\n  const disputeGotcha = async (taskId: string, reason?: string) => {\r\n    if (socket) {\r\n      socket.emit('dispute:create', { taskId, reason });\r\n    }\r\n  };\r\n\r\n  const voteOnDispute = async (disputeId: string, vote: boolean) => {\r\n    if (socket && state.currentPlayer) {\r\n      socket.emit('dispute:vote', { \r\n        disputeId, \r\n        vote, \r\n        voterId: state.currentPlayer.id \r\n      });\r\n    }\r\n  };\r\n\r\n  const acceptGotcha = async (taskId: string) => {\r\n    if (socket) {\r\n      socket.emit('task:accept', { taskId });\r\n    }\r\n  };\r\n\r\n  const contextValue: GameContextType = {\r\n    state,\r\n    socket,\r\n    createGame,\r\n    joinGame,\r\n    startGame,\r\n    endGame,\r\n    lockInPlayer,\r\n    updatePlayerName,\r\n    swapTask,\r\n    claimGotcha,\r\n    disputeGotcha,\r\n    voteOnDispute,\r\n    acceptGotcha\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={contextValue}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook\r\nexport function useGame() {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}