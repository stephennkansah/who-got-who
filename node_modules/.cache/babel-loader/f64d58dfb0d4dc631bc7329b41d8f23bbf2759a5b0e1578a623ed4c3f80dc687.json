{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\super\\\\OneDrive\\\\Desktop\\\\React progams\\\\who got who\\\\src\\\\context\\\\GameContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial State\nconst initialState = {\n  currentGame: null,\n  currentPlayer: null,\n  isConnected: false,\n  isLoading: false,\n  error: null,\n  activeDisputes: [],\n  leaderboard: []\n};\n\n// Actions\n\n// Reducer\nfunction gameReducer(state, action) {\n  var _state$currentPlayer;\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_CONNECTION':\n      return {\n        ...state,\n        isConnected: action.payload\n      };\n    case 'SET_GAME':\n      return {\n        ...state,\n        currentGame: action.payload\n      };\n    case 'SET_PLAYER':\n      return {\n        ...state,\n        currentPlayer: action.payload\n      };\n    case 'UPDATE_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: state.currentGame.players.map(p => p.id === action.payload.id ? action.payload : p)\n        },\n        currentPlayer: ((_state$currentPlayer = state.currentPlayer) === null || _state$currentPlayer === void 0 ? void 0 : _state$currentPlayer.id) === action.payload.id ? action.payload : state.currentPlayer\n      };\n    case 'ADD_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: [...state.currentGame.players, action.payload]\n        }\n      };\n    case 'REMOVE_PLAYER':\n      if (!state.currentGame) return state;\n      return {\n        ...state,\n        currentGame: {\n          ...state.currentGame,\n          players: state.currentGame.players.filter(p => p.id !== action.payload)\n        }\n      };\n    case 'UPDATE_TASK':\n      if (!state.currentPlayer) return state;\n      return {\n        ...state,\n        currentPlayer: {\n          ...state.currentPlayer,\n          tasks: state.currentPlayer.tasks.map(t => t.id === action.payload.id ? action.payload : t)\n        }\n      };\n    case 'ADD_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: [...state.activeDisputes, action.payload]\n      };\n    case 'UPDATE_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: state.activeDisputes.map(d => d.id === action.payload.id ? action.payload : d)\n      };\n    case 'REMOVE_DISPUTE':\n      return {\n        ...state,\n        activeDisputes: state.activeDisputes.filter(d => d.id !== action.payload)\n      };\n    case 'UPDATE_LEADERBOARD':\n      return {\n        ...state,\n        leaderboard: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Context\n\nconst GameContext = /*#__PURE__*/createContext(undefined);\n\n// Socket instance\nlet socket = null;\n\n// Provider Component\n\nexport function GameProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  // Initialize socket connection\n  useEffect(() => {\n    // For now, we'll use a mock socket until we set up the backend\n    if (!socket) {\n      // socket = io(process.env.REACT_APP_SERVER_URL || 'http://localhost:3001');\n      socket = null; // Temporary mock\n\n      if (socket) {\n        socket.on('connect', () => {\n          dispatch({\n            type: 'SET_CONNECTION',\n            payload: true\n          });\n        });\n        socket.on('disconnect', () => {\n          dispatch({\n            type: 'SET_CONNECTION',\n            payload: false\n          });\n        });\n\n        // Game event listeners\n        socket.on('game:update', data => {\n          dispatch({\n            type: 'SET_GAME',\n            payload: data.game\n          });\n        });\n        socket.on('player:join', data => {\n          dispatch({\n            type: 'ADD_PLAYER',\n            payload: data.player\n          });\n        });\n        socket.on('player:leave', data => {\n          dispatch({\n            type: 'REMOVE_PLAYER',\n            payload: data.playerId\n          });\n        });\n        socket.on('player:update', data => {\n          dispatch({\n            type: 'UPDATE_PLAYER',\n            payload: data.player\n          });\n        });\n        socket.on('dispute:create', data => {\n          dispatch({\n            type: 'ADD_DISPUTE',\n            payload: data.dispute\n          });\n        });\n        socket.on('dispute:resolve', data => {\n          dispatch({\n            type: 'UPDATE_DISPUTE',\n            payload: data.dispute\n          });\n        });\n        socket.on('error', data => {\n          dispatch({\n            type: 'SET_ERROR',\n            payload: data.message\n          });\n        });\n      }\n    }\n    return () => {\n      if (socket) {\n        socket.disconnect();\n        socket = null;\n      }\n    };\n  }, []);\n\n  // Game Actions\n  const createGame = async (mode, playerName) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      // TODO: Implement actual API call\n      const mockGame = {\n        id: Math.random().toString(36).substr(2, 9),\n        status: 'draft',\n        mode,\n        packId: 'core-a',\n        createdBy: playerName,\n        createdAt: new Date(),\n        hostId: 'mock-host-id',\n        players: [],\n        settings: {\n          swapsAllowed: mode === 'casual' ? 2 : 1,\n          disputeTimeoutSeconds: 120,\n          hostDefaultOnTie: true,\n          enableNegativeScoring: mode === 'competitive',\n          maxPlayers: 8,\n          targetScore: 4\n        },\n        currentPhase: 'draft'\n      };\n      dispatch({\n        type: 'SET_GAME',\n        payload: mockGame\n      });\n\n      // Store game info for rejoin\n      localStorage.setItem('currentGameId', mockGame.id);\n      localStorage.setItem('playerToken', 'mock-token');\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to create game'\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const joinGame = async (gameId, playerName) => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n    try {\n      // TODO: Implement actual API call\n      console.log('Joining game:', gameId, 'as:', playerName);\n\n      // Store for rejoin\n      localStorage.setItem('currentGameId', gameId);\n      localStorage.setItem('playerToken', 'mock-token');\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to join game'\n      });\n    } finally {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const startGame = async () => {\n    if (socket && state.currentGame) {\n      socket.emit('game:start', {\n        gameId: state.currentGame.id\n      });\n    }\n  };\n  const endGame = async () => {\n    if (socket && state.currentGame) {\n      socket.emit('game:end', {\n        gameId: state.currentGame.id\n      });\n    }\n  };\n  const lockInPlayer = async () => {\n    if (socket && state.currentPlayer) {\n      socket.emit('player:lock', {\n        playerId: state.currentPlayer.id\n      });\n    }\n  };\n  const updatePlayerName = async name => {\n    if (socket && state.currentPlayer) {\n      socket.emit('player:update', {\n        playerId: state.currentPlayer.id,\n        updates: {\n          name\n        }\n      });\n    }\n  };\n  const swapTask = async taskId => {\n    if (socket && state.currentPlayer) {\n      socket.emit('task:swap', {\n        playerId: state.currentPlayer.id,\n        taskId\n      });\n    }\n  };\n  const claimGotcha = async (taskId, targetId) => {\n    if (socket) {\n      socket.emit('task:gotcha', {\n        taskId,\n        targetId\n      });\n    }\n  };\n  const disputeGotcha = async (taskId, reason) => {\n    if (socket) {\n      socket.emit('dispute:create', {\n        taskId,\n        reason\n      });\n    }\n  };\n  const voteOnDispute = async (disputeId, vote) => {\n    if (socket && state.currentPlayer) {\n      socket.emit('dispute:vote', {\n        disputeId,\n        vote,\n        voterId: state.currentPlayer.id\n      });\n    }\n  };\n  const acceptGotcha = async taskId => {\n    if (socket) {\n      socket.emit('task:accept', {\n        taskId\n      });\n    }\n  };\n  const contextValue = {\n    state,\n    socket,\n    createGame,\n    joinGame,\n    startGame,\n    endGame,\n    lockInPlayer,\n    updatePlayerName,\n    swapTask,\n    claimGotcha,\n    disputeGotcha,\n    voteOnDispute,\n    acceptGotcha\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n}\n\n// Hook\n_s(GameProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = GameProvider;\nexport function useGame() {\n  _s2();\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n}\n_s2(useGame, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","currentGame","currentPlayer","isConnected","isLoading","error","activeDisputes","leaderboard","gameReducer","state","action","_state$currentPlayer","type","payload","players","map","p","id","filter","tasks","t","d","GameContext","undefined","socket","GameProvider","children","_s","dispatch","on","data","game","player","playerId","dispute","message","disconnect","createGame","mode","playerName","mockGame","Math","random","toString","substr","status","packId","createdBy","createdAt","Date","hostId","settings","swapsAllowed","disputeTimeoutSeconds","hostDefaultOnTie","enableNegativeScoring","maxPlayers","targetScore","currentPhase","localStorage","setItem","joinGame","gameId","console","log","startGame","emit","endGame","lockInPlayer","updatePlayerName","name","updates","swapTask","taskId","claimGotcha","targetId","disputeGotcha","reason","voteOnDispute","disputeId","vote","voterId","acceptGotcha","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGame","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/super/OneDrive/Desktop/React progams/who got who/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { \r\n  GameState, \r\n  Game, \r\n  Player, \r\n  TaskInstance, \r\n  Dispute,\r\n  SocketEvents \r\n} from '../types';\r\n\r\n// Initial State\r\nconst initialState: GameState = {\r\n  currentGame: null,\r\n  currentPlayer: null,\r\n  isConnected: false,\r\n  isLoading: false,\r\n  error: null,\r\n  activeDisputes: [],\r\n  leaderboard: []\r\n};\r\n\r\n// Actions\r\ntype GameAction = \r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_CONNECTION'; payload: boolean }\r\n  | { type: 'SET_GAME'; payload: Game | null }\r\n  | { type: 'SET_PLAYER'; payload: Player | null }\r\n  | { type: 'UPDATE_PLAYER'; payload: Player }\r\n  | { type: 'ADD_PLAYER'; payload: Player }\r\n  | { type: 'REMOVE_PLAYER'; payload: string }\r\n  | { type: 'UPDATE_TASK'; payload: TaskInstance }\r\n  | { type: 'ADD_DISPUTE'; payload: Dispute }\r\n  | { type: 'UPDATE_DISPUTE'; payload: Dispute }\r\n  | { type: 'REMOVE_DISPUTE'; payload: string }\r\n  | { type: 'UPDATE_LEADERBOARD'; payload: Player[] };\r\n\r\n// Reducer\r\nfunction gameReducer(state: GameState, action: GameAction): GameState {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    \r\n    case 'SET_CONNECTION':\r\n      return { ...state, isConnected: action.payload };\r\n    \r\n    case 'SET_GAME':\r\n      return { ...state, currentGame: action.payload };\r\n    \r\n    case 'SET_PLAYER':\r\n      return { ...state, currentPlayer: action.payload };\r\n    \r\n    case 'UPDATE_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: state.currentGame.players.map(p => \r\n            p.id === action.payload.id ? action.payload : p\r\n          )\r\n        },\r\n        currentPlayer: state.currentPlayer?.id === action.payload.id \r\n          ? action.payload \r\n          : state.currentPlayer\r\n      };\r\n    \r\n    case 'ADD_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: [...state.currentGame.players, action.payload]\r\n        }\r\n      };\r\n    \r\n    case 'REMOVE_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: state.currentGame.players.filter(p => p.id !== action.payload)\r\n        }\r\n      };\r\n    \r\n    case 'UPDATE_TASK':\r\n      if (!state.currentPlayer) return state;\r\n      return {\r\n        ...state,\r\n        currentPlayer: {\r\n          ...state.currentPlayer,\r\n          tasks: state.currentPlayer.tasks.map(t => \r\n            t.id === action.payload.id ? action.payload : t\r\n          )\r\n        }\r\n      };\r\n    \r\n    case 'ADD_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: [...state.activeDisputes, action.payload]\r\n      };\r\n    \r\n    case 'UPDATE_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: state.activeDisputes.map(d => \r\n          d.id === action.payload.id ? action.payload : d\r\n        )\r\n      };\r\n    \r\n    case 'REMOVE_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: state.activeDisputes.filter(d => d.id !== action.payload)\r\n      };\r\n    \r\n    case 'UPDATE_LEADERBOARD':\r\n      return {\r\n        ...state,\r\n        leaderboard: action.payload\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Context\r\ninterface GameContextType {\r\n  state: GameState;\r\n  socket: Socket | null;\r\n  // Game actions\r\n  createGame: (mode: 'casual' | 'competitive', playerName: string) => Promise<void>;\r\n  joinGame: (gameId: string, playerName: string) => Promise<void>;\r\n  startGame: () => Promise<void>;\r\n  endGame: () => Promise<void>;\r\n  \r\n  // Player actions\r\n  lockInPlayer: () => Promise<void>;\r\n  updatePlayerName: (name: string) => Promise<void>;\r\n  \r\n  // Task actions\r\n  swapTask: (taskId: string) => Promise<void>;\r\n  claimGotcha: (taskId: string, targetId: string) => Promise<void>;\r\n  \r\n  // Dispute actions\r\n  disputeGotcha: (taskId: string, reason?: string) => Promise<void>;\r\n  voteOnDispute: (disputeId: string, vote: boolean) => Promise<void>;\r\n  acceptGotcha: (taskId: string) => Promise<void>;\r\n}\r\n\r\nconst GameContext = createContext<GameContextType | undefined>(undefined);\r\n\r\n// Socket instance\r\nlet socket: Socket | null = null;\r\n\r\n// Provider Component\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function GameProvider({ children }: GameProviderProps) {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    // For now, we'll use a mock socket until we set up the backend\r\n    if (!socket) {\r\n      // socket = io(process.env.REACT_APP_SERVER_URL || 'http://localhost:3001');\r\n      socket = null; // Temporary mock\r\n      \r\n      if (socket) {\r\n        socket.on('connect', () => {\r\n          dispatch({ type: 'SET_CONNECTION', payload: true });\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n          dispatch({ type: 'SET_CONNECTION', payload: false });\r\n        });\r\n\r\n        // Game event listeners\r\n        socket.on('game:update', (data) => {\r\n          dispatch({ type: 'SET_GAME', payload: data.game });\r\n        });\r\n\r\n        socket.on('player:join', (data) => {\r\n          dispatch({ type: 'ADD_PLAYER', payload: data.player });\r\n        });\r\n\r\n        socket.on('player:leave', (data) => {\r\n          dispatch({ type: 'REMOVE_PLAYER', payload: data.playerId });\r\n        });\r\n\r\n        socket.on('player:update', (data) => {\r\n          dispatch({ type: 'UPDATE_PLAYER', payload: data.player });\r\n        });\r\n\r\n        socket.on('dispute:create', (data) => {\r\n          dispatch({ type: 'ADD_DISPUTE', payload: data.dispute });\r\n        });\r\n\r\n        socket.on('dispute:resolve', (data) => {\r\n          dispatch({ type: 'UPDATE_DISPUTE', payload: data.dispute });\r\n        });\r\n\r\n        socket.on('error', (data) => {\r\n          dispatch({ type: 'SET_ERROR', payload: data.message });\r\n        });\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        socket = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Game Actions\r\n  const createGame = async (mode: 'casual' | 'competitive', playerName: string) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      // TODO: Implement actual API call\r\n      const mockGame: Game = {\r\n        id: Math.random().toString(36).substr(2, 9),\r\n        status: 'draft',\r\n        mode,\r\n        packId: 'core-a',\r\n        createdBy: playerName,\r\n        createdAt: new Date(),\r\n        hostId: 'mock-host-id',\r\n        players: [],\r\n        settings: {\r\n          swapsAllowed: mode === 'casual' ? 2 : 1,\r\n          disputeTimeoutSeconds: 120,\r\n          hostDefaultOnTie: true,\r\n          enableNegativeScoring: mode === 'competitive',\r\n          maxPlayers: 8,\r\n          targetScore: 4\r\n        },\r\n        currentPhase: 'draft'\r\n      };\r\n      \r\n      dispatch({ type: 'SET_GAME', payload: mockGame });\r\n      \r\n      // Store game info for rejoin\r\n      localStorage.setItem('currentGameId', mockGame.id);\r\n      localStorage.setItem('playerToken', 'mock-token');\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to create game' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const joinGame = async (gameId: string, playerName: string) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      // TODO: Implement actual API call\r\n      console.log('Joining game:', gameId, 'as:', playerName);\r\n      \r\n      // Store for rejoin\r\n      localStorage.setItem('currentGameId', gameId);\r\n      localStorage.setItem('playerToken', 'mock-token');\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to join game' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const startGame = async () => {\r\n    if (socket && state.currentGame) {\r\n      socket.emit('game:start', { gameId: state.currentGame.id });\r\n    }\r\n  };\r\n\r\n  const endGame = async () => {\r\n    if (socket && state.currentGame) {\r\n      socket.emit('game:end', { gameId: state.currentGame.id });\r\n    }\r\n  };\r\n\r\n  const lockInPlayer = async () => {\r\n    if (socket && state.currentPlayer) {\r\n      socket.emit('player:lock', { playerId: state.currentPlayer.id });\r\n    }\r\n  };\r\n\r\n  const updatePlayerName = async (name: string) => {\r\n    if (socket && state.currentPlayer) {\r\n      socket.emit('player:update', { \r\n        playerId: state.currentPlayer.id, \r\n        updates: { name } \r\n      });\r\n    }\r\n  };\r\n\r\n  const swapTask = async (taskId: string) => {\r\n    if (socket && state.currentPlayer) {\r\n      socket.emit('task:swap', { \r\n        playerId: state.currentPlayer.id, \r\n        taskId \r\n      });\r\n    }\r\n  };\r\n\r\n  const claimGotcha = async (taskId: string, targetId: string) => {\r\n    if (socket) {\r\n      socket.emit('task:gotcha', { taskId, targetId });\r\n    }\r\n  };\r\n\r\n  const disputeGotcha = async (taskId: string, reason?: string) => {\r\n    if (socket) {\r\n      socket.emit('dispute:create', { taskId, reason });\r\n    }\r\n  };\r\n\r\n  const voteOnDispute = async (disputeId: string, vote: boolean) => {\r\n    if (socket && state.currentPlayer) {\r\n      socket.emit('dispute:vote', { \r\n        disputeId, \r\n        vote, \r\n        voterId: state.currentPlayer.id \r\n      });\r\n    }\r\n  };\r\n\r\n  const acceptGotcha = async (taskId: string) => {\r\n    if (socket) {\r\n      socket.emit('task:accept', { taskId });\r\n    }\r\n  };\r\n\r\n  const contextValue: GameContextType = {\r\n    state,\r\n    socket,\r\n    createGame,\r\n    joinGame,\r\n    startGame,\r\n    endGame,\r\n    lockInPlayer,\r\n    updatePlayerName,\r\n    swapTask,\r\n    claimGotcha,\r\n    disputeGotcha,\r\n    voteOnDispute,\r\n    acceptGotcha\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={contextValue}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook\r\nexport function useGame() {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}