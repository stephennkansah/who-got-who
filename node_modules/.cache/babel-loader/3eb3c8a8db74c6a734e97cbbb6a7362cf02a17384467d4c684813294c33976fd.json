{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";// Initial State\nconst initialState={currentGame:null,currentPlayer:null,isConnected:false,isLoading:false,error:null,activeDisputes:[],leaderboard:[]};// Actions\n// Reducer\nfunction gameReducer(state,action){var _state$currentPlayer;switch(action.type){case'SET_LOADING':return{...state,isLoading:action.payload};case'SET_ERROR':return{...state,error:action.payload};case'SET_CONNECTION':return{...state,isConnected:action.payload};case'SET_GAME':return{...state,currentGame:action.payload};case'SET_PLAYER':return{...state,currentPlayer:action.payload};case'UPDATE_PLAYER':if(!state.currentGame)return state;return{...state,currentGame:{...state.currentGame,players:state.currentGame.players.map(p=>p.id===action.payload.id?action.payload:p)},currentPlayer:((_state$currentPlayer=state.currentPlayer)===null||_state$currentPlayer===void 0?void 0:_state$currentPlayer.id)===action.payload.id?action.payload:state.currentPlayer};case'ADD_PLAYER':if(!state.currentGame)return state;return{...state,currentGame:{...state.currentGame,players:[...state.currentGame.players,action.payload]}};case'REMOVE_PLAYER':if(!state.currentGame)return state;return{...state,currentGame:{...state.currentGame,players:state.currentGame.players.filter(p=>p.id!==action.payload)}};case'UPDATE_TASK':if(!state.currentPlayer)return state;return{...state,currentPlayer:{...state.currentPlayer,tasks:state.currentPlayer.tasks.map(t=>t.id===action.payload.id?action.payload:t)}};case'ADD_DISPUTE':return{...state,activeDisputes:[...state.activeDisputes,action.payload]};case'UPDATE_DISPUTE':return{...state,activeDisputes:state.activeDisputes.map(d=>d.id===action.payload.id?action.payload:d)};case'REMOVE_DISPUTE':return{...state,activeDisputes:state.activeDisputes.filter(d=>d.id!==action.payload)};case'UPDATE_LEADERBOARD':return{...state,leaderboard:action.payload};default:return state;}}// Context\nconst GameContext=/*#__PURE__*/createContext(undefined);// Socket instance\nlet socket=null;// Provider Component\nexport function GameProvider(_ref){let{children}=_ref;const[state,dispatch]=useReducer(gameReducer,initialState);// Initialize socket connection\nuseEffect(()=>{// TODO: Replace mock with real Socket.IO connection once backend is ready\n// For now we skip setting up a socket so TypeScript doesn't complain about\n// methods like .on() on an uninitialised object.\ndispatch({type:'SET_CONNECTION',payload:false});return()=>{if(socket){var _socket$disconnect,_socket;(_socket$disconnect=(_socket=socket).disconnect)===null||_socket$disconnect===void 0?void 0:_socket$disconnect.call(_socket);socket=null;}};},[]);// Check for existing game in localStorage on app load\nuseEffect(()=>{const savedGameData=localStorage.getItem('gameData');const savedPlayerId=localStorage.getItem('currentPlayerId');if(savedGameData&&savedPlayerId){try{const game=JSON.parse(savedGameData);const player=game.players.find(p=>p.id===savedPlayerId);if(game&&player){dispatch({type:'SET_GAME',payload:game});dispatch({type:'SET_PLAYER',payload:player});}}catch(error){console.log('Failed to restore game from localStorage:',error);// Clear corrupted data\nlocalStorage.removeItem('gameData');localStorage.removeItem('currentPlayerId');}}},[]);// Game Actions\nconst createGame=async(mode,playerName)=>{dispatch({type:'SET_LOADING',payload:true});dispatch({type:'SET_ERROR',payload:null});try{const gameId=Math.random().toString(36).substr(2,9).toUpperCase();const playerId=Math.random().toString(36).substr(2,9);// Import task functions\nconst{getRandomTasks}=await import('../data/mockTasks');const playerTasks=getRandomTasks('core-a',7);// Create mock player\nconst mockPlayer={id:playerId,name:playerName,gameId:gameId,swapsLeft:mode==='casual'?2:1,score:0,lockedIn:false,isHost:true,token:'mock-token',tasks:playerTasks.map((task,index)=>({id:`task-instance-${index}`,gameId:gameId,playerId:playerId,text:task.text,difficulty:task.difficulty,status:'pending',packId:'core-a',originalIndex:index})),stats:{gothcas:0,failed:0,disputesLost:0,uniqueTargets:[],firstTimeTargets:0}};const mockGame={id:gameId,status:'draft',mode,packId:'core-a',createdBy:playerName,createdAt:new Date(),hostId:playerId,players:[mockPlayer],settings:{swapsAllowed:mode==='casual'?2:1,disputeTimeoutSeconds:120,hostDefaultOnTie:true,enableNegativeScoring:mode==='competitive',maxPlayers:8,targetScore:4},currentPhase:'draft'};dispatch({type:'SET_GAME',payload:mockGame});dispatch({type:'SET_PLAYER',payload:mockPlayer});// Store game info for rejoin\nlocalStorage.setItem('currentGameId',mockGame.id);localStorage.setItem('currentPlayerId',playerId);localStorage.setItem('gameData',JSON.stringify(mockGame));localStorage.setItem('playerToken','mock-token');}catch(error){dispatch({type:'SET_ERROR',payload:'Failed to create game'});}finally{dispatch({type:'SET_LOADING',payload:false});}};const joinGame=async(gameId,playerName)=>{dispatch({type:'SET_LOADING',payload:true});dispatch({type:'SET_ERROR',payload:null});try{// Try to load existing game from localStorage\nconst savedGameData=localStorage.getItem('gameData');let game=null;if(savedGameData){const parsedGame=JSON.parse(savedGameData);if(parsedGame.id===gameId){game=parsedGame;}}if(!game){throw new Error('Game not found');}// Check if player already exists\nlet existingPlayer=game.players.find(p=>p.name===playerName);if(!existingPlayer){// Create new player\nconst playerId=Math.random().toString(36).substr(2,9);const{getRandomTasks}=await import('../data/mockTasks');const playerTasks=getRandomTasks('core-a',7);const newPlayer={id:playerId,name:playerName,gameId:gameId,swapsLeft:game.settings.swapsAllowed,score:0,lockedIn:false,isHost:false,token:'mock-token',tasks:playerTasks.map((task,index)=>({id:`task-instance-${playerId}-${index}`,gameId:gameId,playerId:playerId,text:task.text,difficulty:task.difficulty,status:'pending',packId:'core-a',originalIndex:index})),stats:{gothcas:0,failed:0,disputesLost:0,uniqueTargets:[],firstTimeTargets:0}};game.players.push(newPlayer);existingPlayer=newPlayer;}dispatch({type:'SET_GAME',payload:game});dispatch({type:'SET_PLAYER',payload:existingPlayer});// Update localStorage\nlocalStorage.setItem('currentGameId',gameId);localStorage.setItem('currentPlayerId',existingPlayer.id);localStorage.setItem('gameData',JSON.stringify(game));localStorage.setItem('playerToken','mock-token');}catch(error){dispatch({type:'SET_ERROR',payload:'Failed to join game. Make sure the game ID is correct.'});}finally{dispatch({type:'SET_LOADING',payload:false});}};const startGame=async()=>{if(!state.currentGame)return;const updatedGame={...state.currentGame,status:'live',currentPhase:'play'};dispatch({type:'SET_GAME',payload:updatedGame});localStorage.setItem('gameData',JSON.stringify(updatedGame));};const endGame=async()=>{if(!state.currentGame)return;const updatedGame={...state.currentGame,status:'ended',currentPhase:'ended'};dispatch({type:'SET_GAME',payload:updatedGame});localStorage.setItem('gameData',JSON.stringify(updatedGame));};const lockInPlayer=async()=>{if(!state.currentPlayer||!state.currentGame)return;const updatedPlayer={...state.currentPlayer,lockedIn:true};const updatedGame={...state.currentGame,players:state.currentGame.players.map(p=>p.id===updatedPlayer.id?updatedPlayer:p)};dispatch({type:'SET_PLAYER',payload:updatedPlayer});dispatch({type:'SET_GAME',payload:updatedGame});localStorage.setItem('gameData',JSON.stringify(updatedGame));};const updatePlayerName=async name=>{if(!state.currentPlayer||!state.currentGame)return;const updatedPlayer={...state.currentPlayer,name};const updatedGame={...state.currentGame,players:state.currentGame.players.map(p=>p.id===updatedPlayer.id?updatedPlayer:p)};dispatch({type:'SET_PLAYER',payload:updatedPlayer});dispatch({type:'SET_GAME',payload:updatedGame});localStorage.setItem('gameData',JSON.stringify(updatedGame));};const swapTask=async taskId=>{if(!state.currentPlayer||!state.currentGame||state.currentPlayer.swapsLeft<=0)return;try{const{getRandomTask}=await import('../data/mockTasks');const currentTaskIds=state.currentPlayer.tasks.map(t=>t.text);// Use text as ID for exclusion\nconst newTask=getRandomTask('core-a',currentTaskIds);if(!newTask){dispatch({type:'SET_ERROR',payload:'No more tasks available for swapping'});return;}const updatedTasks=state.currentPlayer.tasks.map(task=>task.id===taskId?{...task,text:newTask.text,difficulty:newTask.difficulty}:task);const updatedPlayer={...state.currentPlayer,tasks:updatedTasks,swapsLeft:state.currentPlayer.swapsLeft-1};const updatedGame={...state.currentGame,players:state.currentGame.players.map(p=>p.id===updatedPlayer.id?updatedPlayer:p)};dispatch({type:'SET_PLAYER',payload:updatedPlayer});dispatch({type:'SET_GAME',payload:updatedGame});localStorage.setItem('gameData',JSON.stringify(updatedGame));}catch(error){dispatch({type:'SET_ERROR',payload:'Failed to swap task'});}};const claimGotcha=async(taskId,targetId)=>{if(!state.currentPlayer||!state.currentGame)return;try{// Update task status and add target\nconst updatedTasks=state.currentPlayer.tasks.map(task=>task.id===taskId?{...task,status:'got',targetId,gotAt:new Date()}:task);// Update player score and stats\nconst targetPlayer=state.currentGame.players.find(p=>p.id===targetId);const isFirstTimeTarget=!state.currentPlayer.stats.uniqueTargets.includes(targetId);const updatedPlayer={...state.currentPlayer,tasks:updatedTasks,score:state.currentPlayer.score+1+(isFirstTimeTarget?0.5:0),stats:{...state.currentPlayer.stats,gothcas:state.currentPlayer.stats.gothcas+1,uniqueTargets:isFirstTimeTarget?[...state.currentPlayer.stats.uniqueTargets,targetId]:state.currentPlayer.stats.uniqueTargets,firstTimeTargets:isFirstTimeTarget?state.currentPlayer.stats.firstTimeTargets+1:state.currentPlayer.stats.firstTimeTargets}};const updatedGame={...state.currentGame,players:state.currentGame.players.map(p=>p.id===updatedPlayer.id?updatedPlayer:p)};dispatch({type:'SET_PLAYER',payload:updatedPlayer});dispatch({type:'SET_GAME',payload:updatedGame});localStorage.setItem('gameData',JSON.stringify(updatedGame));// Check win condition\nif(updatedPlayer.score>=state.currentGame.settings.targetScore){await endGame();}}catch(error){dispatch({type:'SET_ERROR',payload:'Failed to claim Gotcha'});}};const disputeGotcha=async(taskId,reason)=>{// For demo purposes, just mark as disputed\nconsole.log('Dispute created for task:',taskId,'Reason:',reason);};const voteOnDispute=async(disputeId,vote)=>{// For demo purposes, just log the vote\nconsole.log('Vote cast on dispute:',disputeId,'Vote:',vote);};const acceptGotcha=async taskId=>{// For demo purposes, just accept\nconsole.log('Gotcha accepted for task:',taskId);};// Testing utilities for demo\nconst forceGameState=async status=>{if(!state.currentGame)return;const updatedGame={...state.currentGame,status,currentPhase:status==='draft'?'draft':status==='live'?'play':'ended'};dispatch({type:'SET_GAME',payload:updatedGame});localStorage.setItem('gameData',JSON.stringify(updatedGame));};const simulateScore=async points=>{if(!state.currentPlayer||!state.currentGame)return;const updatedPlayer={...state.currentPlayer,score:Math.max(0,state.currentPlayer.score+points),stats:{...state.currentPlayer.stats,gothcas:Math.max(0,state.currentPlayer.stats.gothcas+(points>0?points:0))}};const updatedGame={...state.currentGame,players:state.currentGame.players.map(p=>p.id===updatedPlayer.id?updatedPlayer:p)};dispatch({type:'SET_PLAYER',payload:updatedPlayer});dispatch({type:'SET_GAME',payload:updatedGame});localStorage.setItem('gameData',JSON.stringify(updatedGame));};const contextValue={state,socket,createGame,joinGame,startGame,endGame,lockInPlayer,updatePlayerName,swapTask,claimGotcha,disputeGotcha,voteOnDispute,acceptGotcha,// Testing utilities\nforceGameState,simulateScore};return/*#__PURE__*/_jsx(GameContext.Provider,{value:contextValue,children:children});}// Hook\nexport function useGame(){const context=useContext(GameContext);if(context===undefined){throw new Error('useGame must be used within a GameProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsx","_jsx","initialState","currentGame","currentPlayer","isConnected","isLoading","error","activeDisputes","leaderboard","gameReducer","state","action","_state$currentPlayer","type","payload","players","map","p","id","filter","tasks","t","d","GameContext","undefined","socket","GameProvider","_ref","children","dispatch","_socket$disconnect","_socket","disconnect","call","savedGameData","localStorage","getItem","savedPlayerId","game","JSON","parse","player","find","console","log","removeItem","createGame","mode","playerName","gameId","Math","random","toString","substr","toUpperCase","playerId","getRandomTasks","playerTasks","mockPlayer","name","swapsLeft","score","lockedIn","isHost","token","task","index","text","difficulty","status","packId","originalIndex","stats","gothcas","failed","disputesLost","uniqueTargets","firstTimeTargets","mockGame","createdBy","createdAt","Date","hostId","settings","swapsAllowed","disputeTimeoutSeconds","hostDefaultOnTie","enableNegativeScoring","maxPlayers","targetScore","currentPhase","setItem","stringify","joinGame","parsedGame","Error","existingPlayer","newPlayer","push","startGame","updatedGame","endGame","lockInPlayer","updatedPlayer","updatePlayerName","swapTask","taskId","getRandomTask","currentTaskIds","newTask","updatedTasks","claimGotcha","targetId","gotAt","targetPlayer","isFirstTimeTarget","includes","disputeGotcha","reason","voteOnDispute","disputeId","vote","acceptGotcha","forceGameState","simulateScore","points","max","contextValue","Provider","value","useGame","context"],"sources":["C:/Users/super/OneDrive/Desktop/React progams/who got who/src/context/GameContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { \r\n  GameState, \r\n  Game, \r\n  Player, \r\n  TaskInstance, \r\n  Dispute,\r\n  SocketEvents \r\n} from '../types';\r\n\r\n// Initial State\r\nconst initialState: GameState = {\r\n  currentGame: null,\r\n  currentPlayer: null,\r\n  isConnected: false,\r\n  isLoading: false,\r\n  error: null,\r\n  activeDisputes: [],\r\n  leaderboard: []\r\n};\r\n\r\n// Actions\r\ntype GameAction = \r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_CONNECTION'; payload: boolean }\r\n  | { type: 'SET_GAME'; payload: Game | null }\r\n  | { type: 'SET_PLAYER'; payload: Player | null }\r\n  | { type: 'UPDATE_PLAYER'; payload: Player }\r\n  | { type: 'ADD_PLAYER'; payload: Player }\r\n  | { type: 'REMOVE_PLAYER'; payload: string }\r\n  | { type: 'UPDATE_TASK'; payload: TaskInstance }\r\n  | { type: 'ADD_DISPUTE'; payload: Dispute }\r\n  | { type: 'UPDATE_DISPUTE'; payload: Dispute }\r\n  | { type: 'REMOVE_DISPUTE'; payload: string }\r\n  | { type: 'UPDATE_LEADERBOARD'; payload: Player[] };\r\n\r\n// Reducer\r\nfunction gameReducer(state: GameState, action: GameAction): GameState {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    \r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    \r\n    case 'SET_CONNECTION':\r\n      return { ...state, isConnected: action.payload };\r\n    \r\n    case 'SET_GAME':\r\n      return { ...state, currentGame: action.payload };\r\n    \r\n    case 'SET_PLAYER':\r\n      return { ...state, currentPlayer: action.payload };\r\n    \r\n    case 'UPDATE_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: state.currentGame.players.map(p => \r\n            p.id === action.payload.id ? action.payload : p\r\n          )\r\n        },\r\n        currentPlayer: state.currentPlayer?.id === action.payload.id \r\n          ? action.payload \r\n          : state.currentPlayer\r\n      };\r\n    \r\n    case 'ADD_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: [...state.currentGame.players, action.payload]\r\n        }\r\n      };\r\n    \r\n    case 'REMOVE_PLAYER':\r\n      if (!state.currentGame) return state;\r\n      return {\r\n        ...state,\r\n        currentGame: {\r\n          ...state.currentGame,\r\n          players: state.currentGame.players.filter(p => p.id !== action.payload)\r\n        }\r\n      };\r\n    \r\n    case 'UPDATE_TASK':\r\n      if (!state.currentPlayer) return state;\r\n      return {\r\n        ...state,\r\n        currentPlayer: {\r\n          ...state.currentPlayer,\r\n          tasks: state.currentPlayer.tasks.map(t => \r\n            t.id === action.payload.id ? action.payload : t\r\n          )\r\n        }\r\n      };\r\n    \r\n    case 'ADD_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: [...state.activeDisputes, action.payload]\r\n      };\r\n    \r\n    case 'UPDATE_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: state.activeDisputes.map(d => \r\n          d.id === action.payload.id ? action.payload : d\r\n        )\r\n      };\r\n    \r\n    case 'REMOVE_DISPUTE':\r\n      return {\r\n        ...state,\r\n        activeDisputes: state.activeDisputes.filter(d => d.id !== action.payload)\r\n      };\r\n    \r\n    case 'UPDATE_LEADERBOARD':\r\n      return {\r\n        ...state,\r\n        leaderboard: action.payload\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Context\r\ninterface GameContextType {\r\n  state: GameState;\r\n  socket: Socket | null;\r\n  // Game actions\r\n  createGame: (mode: 'casual' | 'competitive', playerName: string) => Promise<void>;\r\n  joinGame: (gameId: string, playerName: string) => Promise<void>;\r\n  startGame: () => Promise<void>;\r\n  endGame: () => Promise<void>;\r\n  \r\n  // Player actions\r\n  lockInPlayer: () => Promise<void>;\r\n  updatePlayerName: (name: string) => Promise<void>;\r\n  \r\n  // Task actions\r\n  swapTask: (taskId: string) => Promise<void>;\r\n  claimGotcha: (taskId: string, targetId: string) => Promise<void>;\r\n  \r\n  // Dispute actions\r\n  disputeGotcha: (taskId: string, reason?: string) => Promise<void>;\r\n  voteOnDispute: (disputeId: string, vote: boolean) => Promise<void>;\r\n  acceptGotcha: (taskId: string) => Promise<void>;\r\n\r\n  // Testing utilities (demo only)\r\n  forceGameState?: (status: 'draft' | 'live' | 'ended') => Promise<void>;\r\n  simulateScore?: (points: number) => Promise<void>;\r\n}\r\n\r\nconst GameContext = createContext<GameContextType | undefined>(undefined);\r\n\r\n// Socket instance\r\nlet socket: Socket | null = null;\r\n\r\n// Provider Component\r\ninterface GameProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function GameProvider({ children }: GameProviderProps) {\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    // TODO: Replace mock with real Socket.IO connection once backend is ready\r\n    // For now we skip setting up a socket so TypeScript doesn't complain about\r\n    // methods like .on() on an uninitialised object.\r\n    dispatch({ type: 'SET_CONNECTION', payload: false });\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect?.();\r\n        socket = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Check for existing game in localStorage on app load\r\n  useEffect(() => {\r\n    const savedGameData = localStorage.getItem('gameData');\r\n    const savedPlayerId = localStorage.getItem('currentPlayerId');\r\n    \r\n    if (savedGameData && savedPlayerId) {\r\n      try {\r\n        const game: Game = JSON.parse(savedGameData);\r\n        const player = game.players.find(p => p.id === savedPlayerId);\r\n        \r\n        if (game && player) {\r\n          dispatch({ type: 'SET_GAME', payload: game });\r\n          dispatch({ type: 'SET_PLAYER', payload: player });\r\n        }\r\n      } catch (error) {\r\n        console.log('Failed to restore game from localStorage:', error);\r\n        // Clear corrupted data\r\n        localStorage.removeItem('gameData');\r\n        localStorage.removeItem('currentPlayerId');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Game Actions\r\n  const createGame = async (mode: 'casual' | 'competitive', playerName: string) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      const gameId = Math.random().toString(36).substr(2, 9).toUpperCase();\r\n      const playerId = Math.random().toString(36).substr(2, 9);\r\n      \r\n      // Import task functions\r\n      const { getRandomTasks } = await import('../data/mockTasks');\r\n      const playerTasks = getRandomTasks('core-a', 7);\r\n      \r\n      // Create mock player\r\n      const mockPlayer: Player = {\r\n        id: playerId,\r\n        name: playerName,\r\n        gameId: gameId,\r\n        swapsLeft: mode === 'casual' ? 2 : 1,\r\n        score: 0,\r\n        lockedIn: false,\r\n        isHost: true,\r\n        token: 'mock-token',\r\n        tasks: playerTasks.map((task, index) => ({\r\n          id: `task-instance-${index}`,\r\n          gameId: gameId,\r\n          playerId: playerId,\r\n          text: task.text,\r\n          difficulty: task.difficulty,\r\n          status: 'pending' as const,\r\n          packId: 'core-a',\r\n          originalIndex: index\r\n        })),\r\n        stats: {\r\n          gothcas: 0,\r\n          failed: 0,\r\n          disputesLost: 0,\r\n          uniqueTargets: [],\r\n          firstTimeTargets: 0\r\n        }\r\n      };\r\n\r\n      const mockGame: Game = {\r\n        id: gameId,\r\n        status: 'draft',\r\n        mode,\r\n        packId: 'core-a',\r\n        createdBy: playerName,\r\n        createdAt: new Date(),\r\n        hostId: playerId,\r\n        players: [mockPlayer],\r\n        settings: {\r\n          swapsAllowed: mode === 'casual' ? 2 : 1,\r\n          disputeTimeoutSeconds: 120,\r\n          hostDefaultOnTie: true,\r\n          enableNegativeScoring: mode === 'competitive',\r\n          maxPlayers: 8,\r\n          targetScore: 4\r\n        },\r\n        currentPhase: 'draft'\r\n      };\r\n      \r\n      dispatch({ type: 'SET_GAME', payload: mockGame });\r\n      dispatch({ type: 'SET_PLAYER', payload: mockPlayer });\r\n      \r\n      // Store game info for rejoin\r\n      localStorage.setItem('currentGameId', mockGame.id);\r\n      localStorage.setItem('currentPlayerId', playerId);\r\n      localStorage.setItem('gameData', JSON.stringify(mockGame));\r\n      localStorage.setItem('playerToken', 'mock-token');\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to create game' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const joinGame = async (gameId: string, playerName: string) => {\r\n    dispatch({ type: 'SET_LOADING', payload: true });\r\n    dispatch({ type: 'SET_ERROR', payload: null });\r\n    \r\n    try {\r\n      // Try to load existing game from localStorage\r\n      const savedGameData = localStorage.getItem('gameData');\r\n      let game: Game | null = null;\r\n      \r\n      if (savedGameData) {\r\n        const parsedGame = JSON.parse(savedGameData);\r\n        if (parsedGame.id === gameId) {\r\n          game = parsedGame;\r\n        }\r\n      }\r\n      \r\n      if (!game) {\r\n        throw new Error('Game not found');\r\n      }\r\n      \r\n      // Check if player already exists\r\n      let existingPlayer = game.players.find(p => p.name === playerName);\r\n      \r\n      if (!existingPlayer) {\r\n        // Create new player\r\n        const playerId = Math.random().toString(36).substr(2, 9);\r\n        const { getRandomTasks } = await import('../data/mockTasks');\r\n        const playerTasks = getRandomTasks('core-a', 7);\r\n        \r\n        const newPlayer: Player = {\r\n          id: playerId,\r\n          name: playerName,\r\n          gameId: gameId,\r\n          swapsLeft: game.settings.swapsAllowed,\r\n          score: 0,\r\n          lockedIn: false,\r\n          isHost: false,\r\n          token: 'mock-token',\r\n          tasks: playerTasks.map((task, index) => ({\r\n            id: `task-instance-${playerId}-${index}`,\r\n            gameId: gameId,\r\n            playerId: playerId,\r\n            text: task.text,\r\n            difficulty: task.difficulty,\r\n            status: 'pending' as const,\r\n            packId: 'core-a',\r\n            originalIndex: index\r\n          })),\r\n          stats: {\r\n            gothcas: 0,\r\n            failed: 0,\r\n            disputesLost: 0,\r\n            uniqueTargets: [],\r\n            firstTimeTargets: 0\r\n          }\r\n        };\r\n        \r\n        game.players.push(newPlayer);\r\n        existingPlayer = newPlayer;\r\n      }\r\n      \r\n      dispatch({ type: 'SET_GAME', payload: game });\r\n      dispatch({ type: 'SET_PLAYER', payload: existingPlayer });\r\n      \r\n      // Update localStorage\r\n      localStorage.setItem('currentGameId', gameId);\r\n      localStorage.setItem('currentPlayerId', existingPlayer.id);\r\n      localStorage.setItem('gameData', JSON.stringify(game));\r\n      localStorage.setItem('playerToken', 'mock-token');\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to join game. Make sure the game ID is correct.' });\r\n    } finally {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const startGame = async () => {\r\n    if (!state.currentGame) return;\r\n    \r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      status: 'live' as const,\r\n      currentPhase: 'play' as const\r\n    };\r\n    \r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const endGame = async () => {\r\n    if (!state.currentGame) return;\r\n    \r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      status: 'ended' as const,\r\n      currentPhase: 'ended' as const\r\n    };\r\n    \r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const lockInPlayer = async () => {\r\n    if (!state.currentPlayer || !state.currentGame) return;\r\n    \r\n    const updatedPlayer = { ...state.currentPlayer, lockedIn: true };\r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      players: state.currentGame.players.map(p => \r\n        p.id === updatedPlayer.id ? updatedPlayer : p\r\n      )\r\n    };\r\n    \r\n    dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const updatePlayerName = async (name: string) => {\r\n    if (!state.currentPlayer || !state.currentGame) return;\r\n    \r\n    const updatedPlayer = { ...state.currentPlayer, name };\r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      players: state.currentGame.players.map(p => \r\n        p.id === updatedPlayer.id ? updatedPlayer : p\r\n      )\r\n    };\r\n    \r\n    dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const swapTask = async (taskId: string) => {\r\n    if (!state.currentPlayer || !state.currentGame || state.currentPlayer.swapsLeft <= 0) return;\r\n    \r\n    try {\r\n      const { getRandomTask } = await import('../data/mockTasks');\r\n      const currentTaskIds = state.currentPlayer.tasks.map(t => t.text); // Use text as ID for exclusion\r\n      const newTask = getRandomTask('core-a', currentTaskIds);\r\n      \r\n      if (!newTask) {\r\n        dispatch({ type: 'SET_ERROR', payload: 'No more tasks available for swapping' });\r\n        return;\r\n      }\r\n      \r\n      const updatedTasks = state.currentPlayer.tasks.map(task => \r\n        task.id === taskId \r\n          ? { ...task, text: newTask.text, difficulty: newTask.difficulty }\r\n          : task\r\n      );\r\n      \r\n      const updatedPlayer = {\r\n        ...state.currentPlayer,\r\n        tasks: updatedTasks,\r\n        swapsLeft: state.currentPlayer.swapsLeft - 1\r\n      };\r\n      \r\n      const updatedGame = {\r\n        ...state.currentGame,\r\n        players: state.currentGame.players.map(p => \r\n          p.id === updatedPlayer.id ? updatedPlayer : p\r\n        )\r\n      };\r\n      \r\n      dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n      dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n      localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to swap task' });\r\n    }\r\n  };\r\n\r\n  const claimGotcha = async (taskId: string, targetId: string) => {\r\n    if (!state.currentPlayer || !state.currentGame) return;\r\n    \r\n    try {\r\n      // Update task status and add target\r\n      const updatedTasks = state.currentPlayer.tasks.map(task => \r\n        task.id === taskId \r\n          ? { ...task, status: 'got' as const, targetId, gotAt: new Date() }\r\n          : task\r\n      );\r\n      \r\n      // Update player score and stats\r\n      const targetPlayer = state.currentGame.players.find(p => p.id === targetId);\r\n      const isFirstTimeTarget = !state.currentPlayer.stats.uniqueTargets.includes(targetId);\r\n      \r\n      const updatedPlayer = {\r\n        ...state.currentPlayer,\r\n        tasks: updatedTasks,\r\n        score: state.currentPlayer.score + 1 + (isFirstTimeTarget ? 0.5 : 0),\r\n        stats: {\r\n          ...state.currentPlayer.stats,\r\n          gothcas: state.currentPlayer.stats.gothcas + 1,\r\n          uniqueTargets: isFirstTimeTarget \r\n            ? [...state.currentPlayer.stats.uniqueTargets, targetId]\r\n            : state.currentPlayer.stats.uniqueTargets,\r\n          firstTimeTargets: isFirstTimeTarget \r\n            ? state.currentPlayer.stats.firstTimeTargets + 1\r\n            : state.currentPlayer.stats.firstTimeTargets\r\n        }\r\n      };\r\n      \r\n      const updatedGame = {\r\n        ...state.currentGame,\r\n        players: state.currentGame.players.map(p => \r\n          p.id === updatedPlayer.id ? updatedPlayer : p\r\n        )\r\n      };\r\n      \r\n      dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n      dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n      localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n      \r\n      // Check win condition\r\n      if (updatedPlayer.score >= state.currentGame.settings.targetScore) {\r\n        await endGame();\r\n      }\r\n      \r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to claim Gotcha' });\r\n    }\r\n  };\r\n\r\n  const disputeGotcha = async (taskId: string, reason?: string) => {\r\n    // For demo purposes, just mark as disputed\r\n    console.log('Dispute created for task:', taskId, 'Reason:', reason);\r\n  };\r\n\r\n  const voteOnDispute = async (disputeId: string, vote: boolean) => {\r\n    // For demo purposes, just log the vote\r\n    console.log('Vote cast on dispute:', disputeId, 'Vote:', vote);\r\n  };\r\n\r\n  const acceptGotcha = async (taskId: string) => {\r\n    // For demo purposes, just accept\r\n    console.log('Gotcha accepted for task:', taskId);\r\n  };\r\n\r\n  // Testing utilities for demo\r\n  const forceGameState = async (status: 'draft' | 'live' | 'ended') => {\r\n    if (!state.currentGame) return;\r\n    \r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      status,\r\n      currentPhase: (status === 'draft' ? 'draft' : status === 'live' ? 'play' : 'ended') as 'draft' | 'play' | 'ended'\r\n    };\r\n    \r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const simulateScore = async (points: number) => {\r\n    if (!state.currentPlayer || !state.currentGame) return;\r\n    \r\n    const updatedPlayer = {\r\n      ...state.currentPlayer,\r\n      score: Math.max(0, state.currentPlayer.score + points),\r\n      stats: {\r\n        ...state.currentPlayer.stats,\r\n        gothcas: Math.max(0, state.currentPlayer.stats.gothcas + (points > 0 ? points : 0))\r\n      }\r\n    };\r\n    \r\n    const updatedGame = {\r\n      ...state.currentGame,\r\n      players: state.currentGame.players.map(p => \r\n        p.id === updatedPlayer.id ? updatedPlayer : p\r\n      )\r\n    };\r\n    \r\n    dispatch({ type: 'SET_PLAYER', payload: updatedPlayer });\r\n    dispatch({ type: 'SET_GAME', payload: updatedGame });\r\n    localStorage.setItem('gameData', JSON.stringify(updatedGame));\r\n  };\r\n\r\n  const contextValue: GameContextType = {\r\n    state,\r\n    socket,\r\n    createGame,\r\n    joinGame,\r\n    startGame,\r\n    endGame,\r\n    lockInPlayer,\r\n    updatePlayerName,\r\n    swapTask,\r\n    claimGotcha,\r\n    disputeGotcha,\r\n    voteOnDispute,\r\n    acceptGotcha,\r\n    // Testing utilities\r\n    forceGameState,\r\n    simulateScore\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={contextValue}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook\r\nexport function useGame() {\r\n  const context = useContext(GameContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGame must be used within a GameProvider');\r\n  }\r\n  return context;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}